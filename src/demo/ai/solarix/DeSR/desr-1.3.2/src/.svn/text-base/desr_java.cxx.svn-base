/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "Sentence.h"
#include "Corpus.h"
#include <sstream>
#include <fstream>


#include <string>


#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <fstream>


#include "Enumerator.h"


#include "Token.h"

SWIGINTERN std::vector< Tanl::Token * >::const_reference std_vector_Sl_Tanl_Token_Sm__Sg__get(std::vector< Tanl::Token * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_Tanl_Token_Sm__Sg__set(std::vector< Tanl::Token * > *self,int i,std::vector< Tanl::Token * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN char const *std_vector_Sl_Tanl_Token_Sm__Sg____repr__(std::vector< Tanl::Token * > *self){
    std::stringstream ss;
    ss << "[";
    for (std::vector<Tanl::Token*>::const_iterator fit = self->begin();
	 fit != self->end(); ++fit) {
      if (fit != self->begin())
         ss << ", ";
      ss << **fit;
    }
    ss << "]";
    return strdup(ss.str().c_str());
  }
SWIGINTERN std::string Tanl_Tag___getitem__(Tanl::Tag *self,std::string const &key){ return (*self)[key]; }
SWIGINTERN void Tanl_Tag___setitem__(Tanl::Tag *self,std::string const &key,std::string const &val){
	  (*self)[key] = val;
    }
SWIGINTERN Tanl::Context *Tanl_Token_context(Tanl::Token *self){
       if (self->context)
          self->context->incRef(); // needed to avoid destruction.
       return self->context;
    }
SWIGINTERN char const *Tanl_Token___repr__(Tanl::Token *self){
       static char tmp[1024];
       char* end = tmp + sprintf(tmp, "<token");
       for (Tanl::Attributes::const_iterator fit = self->attributes.begin();
	    fit != self->attributes.end(); ++fit)
	 // iterator returns pointer to value
	 end += sprintf(end, " %s=\"%s\"", (*fit).first, (*fit).second->c_str());
       sprintf(end, " />");
       return strdup(tmp);
     }
SWIGINTERN void Tanl_Token___setitem____SWIG_0(Tanl::Token *self,char const *key,char const *val){
       self->attributes.insert(key, val);
     }
SWIGINTERN void Tanl_Token___setitem____SWIG_1(Tanl::Token *self,char const *key,int val){
       self->attributes.insert(key, val);
     }
SWIGINTERN char const *Tanl_Token___getitem__(Tanl::Token *self,char const *key){
       const std::string* item = self->attributes.get(key);
       return item ? strdup(item->c_str()) : 0;
     }
SWIGINTERN char const *Tanl_TreeToken___repr__(Tanl::TreeToken *self){
      char tmp[1024];
      char* end = tmp + sprintf(tmp, "<token");
      for (Tanl::Attributes::const_iterator fit = self->token->attributes.begin();
	   fit != self->token->attributes.end(); ++fit)
	end += sprintf(end, " %s=\"%s\"", (*fit).first, (*fit).second->c_str());
      sprintf(end, " />");
      return strdup(tmp);
    }
SWIGINTERN std::vector< Tanl::TreeToken * >::const_reference std_vector_Sl_Tanl_TreeToken_Sm__Sg__get(std::vector< Tanl::TreeToken * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_Tanl_TreeToken_Sm__Sg__set(std::vector< Tanl::TreeToken * > *self,int i,std::vector< Tanl::TreeToken * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN Tanl::Sentence *Tanl_Enumerator_Sl_Tanl_Sentence_Sm__Sg__next(Tanl::Enumerator< Tanl::Sentence * > *self){
    return self->Current();
  }
SWIGINTERN bool Tanl_Enumerator_Sl_Tanl_Sentence_Sm__Sg__hasNext(Tanl::Enumerator< Tanl::Sentence * > *self){ return self->MoveNext(); }
SWIGINTERN Tanl::Sentence &Tanl_Sentence_deref(Tanl::Sentence *self){ return *self; }
SWIGINTERN char const *Tanl_Sentence___repr__(Tanl::Sentence *self){
      std::ostringstream ss;
      for (int i = 0; i < self->size(); i++) {
	Tanl::TreeToken* tok = (*self)[i];
	tok->printTab(ss);
	ss << std::endl;
      }
      return strdup(ss.str().c_str());
    }

#include "State.h"

SWIGINTERN void Parser_Parser_showPerplexity(Parser::Parser *self){ Parser::ShowPerplexity = true; }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_jni_desrJNI_new_1ifstream(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  std::ifstream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (std::ifstream *)new std::ifstream((char const *)arg1);
  *(std::ifstream **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_delete_1ifstream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::ifstream *arg1 = (std::ifstream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::ifstream **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_new_1ofstream(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  std::ofstream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (std::ofstream *)new std::ofstream((char const *)arg1);
  *(std::ofstream **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_delete_1ofstream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::ofstream *arg1 = (std::ofstream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::ofstream **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_Disposable_1Dispose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Tanl::Disposable *arg1 = (Tanl::Disposable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Disposable **)&jarg1; 
  (arg1)->Dispose();
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_new_1Disposable(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Tanl::Disposable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Tanl::Disposable *)new Tanl::Disposable();
  *(Tanl::Disposable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_delete_1Disposable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Tanl::Disposable *arg1 = (Tanl::Disposable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Tanl::Disposable **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_new_1RefCountable(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Tanl::RefCountable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Tanl::RefCountable *)new Tanl::RefCountable();
  *(Tanl::RefCountable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_RefCountable_1refCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Tanl::RefCountable *arg1 = (Tanl::RefCountable *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::RefCountable **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->refCount = arg2;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_RefCountable_1refCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Tanl::RefCountable *arg1 = (Tanl::RefCountable *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::RefCountable **)&jarg1; 
  result = (unsigned int) ((arg1)->refCount);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_RefCountable_1incRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Tanl::RefCountable *arg1 = (Tanl::RefCountable *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::RefCountable **)&jarg1; 
  result = (unsigned int)(arg1)->incRef();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_RefCountable_1decRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Tanl::RefCountable *arg1 = (Tanl::RefCountable *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::RefCountable **)&jarg1; 
  result = (unsigned int)(arg1)->decRef();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_delete_1RefCountable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Tanl::RefCountable *arg1 = (Tanl::RefCountable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Tanl::RefCountable **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_new_1VectorToken_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< Tanl::Token * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< Tanl::Token * > *)new std::vector< Tanl::Token * >();
  *(std::vector< Tanl::Token * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_new_1VectorToken_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< Tanl::Token * >::size_type arg1 ;
  std::vector< Tanl::Token * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< Tanl::Token * >::size_type)jarg1; 
  result = (std::vector< Tanl::Token * > *)new std::vector< Tanl::Token * >(arg1);
  *(std::vector< Tanl::Token * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_VectorToken_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Tanl::Token * > *arg1 = (std::vector< Tanl::Token * > *) 0 ;
  std::vector< Tanl::Token * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Tanl::Token * > **)&jarg1; 
  result = ((std::vector< Tanl::Token * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_VectorToken_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Tanl::Token * > *arg1 = (std::vector< Tanl::Token * > *) 0 ;
  std::vector< Tanl::Token * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Tanl::Token * > **)&jarg1; 
  result = ((std::vector< Tanl::Token * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_VectorToken_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< Tanl::Token * > *arg1 = (std::vector< Tanl::Token * > *) 0 ;
  std::vector< Tanl::Token * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Tanl::Token * > **)&jarg1; 
  arg2 = (std::vector< Tanl::Token * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_jni_desrJNI_VectorToken_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< Tanl::Token * > *arg1 = (std::vector< Tanl::Token * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Tanl::Token * > **)&jarg1; 
  result = (bool)((std::vector< Tanl::Token * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_VectorToken_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< Tanl::Token * > *arg1 = (std::vector< Tanl::Token * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Tanl::Token * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_VectorToken_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< Tanl::Token * > *arg1 = (std::vector< Tanl::Token * > *) 0 ;
  std::vector< Tanl::Token * >::value_type *arg2 = 0 ;
  std::vector< Tanl::Token * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< Tanl::Token * > **)&jarg1; 
  temp2 = *(std::vector< Tanl::Token * >::value_type *)&jarg2;
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< Tanl::Token * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_VectorToken_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Tanl::Token * > *arg1 = (std::vector< Tanl::Token * > *) 0 ;
  int arg2 ;
  std::vector< Tanl::Token * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Tanl::Token * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Tanl::Token * >::value_type *) &std_vector_Sl_Tanl_Token_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< Tanl::Token * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_VectorToken_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< Tanl::Token * > *arg1 = (std::vector< Tanl::Token * > *) 0 ;
  int arg2 ;
  std::vector< Tanl::Token * >::value_type *arg3 = 0 ;
  std::vector< Tanl::Token * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Tanl::Token * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(std::vector< Tanl::Token * >::value_type *)&jarg3;
  arg3 = &temp3; 
  try {
    std_vector_Sl_Tanl_Token_Sm__Sg__set(arg1,arg2,(Tanl::Token *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jstring JNICALL Java_jni_desrJNI_VectorToken_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::vector< Tanl::Token * > *arg1 = (std::vector< Tanl::Token * > *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Tanl::Token * > **)&jarg1; 
  result = (char *)std_vector_Sl_Tanl_Token_Sm__Sg____repr__(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  delete [] result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_delete_1VectorToken(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< Tanl::Token * > *arg1 = (std::vector< Tanl::Token * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< Tanl::Token * > **)&jarg1; 
  for (int i=0; i < arg1->size(); i++) delete (*arg1)[i]; delete arg1;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_AttributeIndex_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Tanl::AttributeIndex *arg1 = (Tanl::AttributeIndex *) 0 ;
  char *arg2 = (char *) 0 ;
  Tanl::AttributeId result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::AttributeIndex **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (Tanl::AttributeId)(arg1)->insert((char const *)arg2);
  jresult = (jlong)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_AttributeIndex_1names_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Tanl::AttributeIndex *arg1 = (Tanl::AttributeIndex *) 0 ;
  std::vector< char const * > *arg2 = (std::vector< char const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::AttributeIndex **)&jarg1; 
  arg2 = *(std::vector< char const * > **)&jarg2; 
  if (arg1) (arg1)->names = *arg2;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_AttributeIndex_1names_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Tanl::AttributeIndex *arg1 = (Tanl::AttributeIndex *) 0 ;
  std::vector< char const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::AttributeIndex **)&jarg1; 
  result = (std::vector< char const * > *)& ((arg1)->names);
  *(std::vector< char const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_new_1AttributeIndex(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Tanl::AttributeIndex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Tanl::AttributeIndex *)new Tanl::AttributeIndex();
  *(Tanl::AttributeIndex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_delete_1AttributeIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Tanl::AttributeIndex *arg1 = (Tanl::AttributeIndex *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Tanl::AttributeIndex **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_new_1Language(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  Tanl::Language *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (Tanl::Language *)new Tanl::Language((char const *)arg1);
  *(Tanl::Language **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_delete_1Language(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Tanl::Language *arg1 = (Tanl::Language *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Tanl::Language **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_new_1Corpus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Tanl::Language *arg1 = 0 ;
  Tanl::Corpus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Language **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tanl::Language const & reference is null");
    return 0;
  } 
  result = (Tanl::Corpus *)new Tanl::Corpus((Tanl::Language const &)*arg1);
  *(Tanl::Corpus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_Corpus_1create_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Tanl::Language *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  Tanl::Corpus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Language **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tanl::Language const & reference is null");
    return 0;
  } 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (Tanl::Corpus *)Tanl::Corpus::create((Tanl::Language const &)*arg1,(char const *)arg2);
  *(Tanl::Corpus **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_Corpus_1create_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  Tanl::Corpus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (Tanl::Corpus *)Tanl::Corpus::create((char const *)arg1,(char const *)arg2);
  *(Tanl::Corpus **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_Corpus_1sentenceReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Tanl::Corpus *arg1 = (Tanl::Corpus *) 0 ;
  std::istream *arg2 = (std::istream *) 0 ;
  Tanl::SentenceReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Corpus **)&jarg1; 
  arg2 = *(std::istream **)&jarg2; 
  result = (Tanl::SentenceReader *)(arg1)->sentenceReader(arg2);
  *(Tanl::SentenceReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_jni_desrJNI_Corpus_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  Tanl::Corpus *arg1 = (Tanl::Corpus *) 0 ;
  Tanl::Sentence *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Tanl::Corpus **)&jarg1; 
  arg2 = *(Tanl::Sentence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tanl::Sentence const & reference is null");
    return 0;
  } 
  result = ((Tanl::Corpus const *)arg1)->toString((Tanl::Sentence const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_Corpus_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Tanl::Corpus *arg1 = (Tanl::Corpus *) 0 ;
  Tanl::AttributeIndex *arg2 = (Tanl::AttributeIndex *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Tanl::Corpus **)&jarg1; 
  arg2 = *(Tanl::AttributeIndex **)&jarg2; 
  if (arg1) (arg1)->index = *arg2;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_Corpus_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Tanl::Corpus *arg1 = (Tanl::Corpus *) 0 ;
  Tanl::AttributeIndex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Corpus **)&jarg1; 
  result = (Tanl::AttributeIndex *)& ((arg1)->index);
  *(Tanl::AttributeIndex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_delete_1Corpus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Tanl::Corpus *arg1 = (Tanl::Corpus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Tanl::Corpus **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_new_1Attributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Tanl::AttributeIndex *arg1 = (Tanl::AttributeIndex *) 0 ;
  Tanl::Attributes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::AttributeIndex **)&jarg1; 
  result = (Tanl::Attributes *)new Tanl::Attributes(arg1);
  *(Tanl::Attributes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_Attributes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Tanl::Attributes *arg1 = (Tanl::Attributes *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Attributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (std::string *)((Tanl::Attributes const *)arg1)->get((char const *)arg2);
  *(std::string **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_Attributes_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Tanl::Attributes *arg1 = (Tanl::Attributes *) 0 ;
  char *arg2 = (char *) 0 ;
  Tanl::AttributeId result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Attributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (Tanl::AttributeId)(arg1)->index((char const *)arg2);
  jresult = (jlong)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_Attributes_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Tanl::Attributes *arg1 = (Tanl::Attributes *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Attributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->insert((char const *)arg2,(char const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_Attributes_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  Tanl::Attributes *arg1 = (Tanl::Attributes *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Attributes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  (arg1)->insert((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_delete_1Attributes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Tanl::Attributes *arg1 = (Tanl::Attributes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Tanl::Attributes **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_new_1TokenLink_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  Tanl::TokenLink *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (Tanl::TokenLink *)new Tanl::TokenLink(arg1,(char const *)arg2);
  *(Tanl::TokenLink **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_new_1TokenLink_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  Tanl::TokenLink *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (Tanl::TokenLink *)new Tanl::TokenLink(arg1);
  *(Tanl::TokenLink **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_new_1TokenLink_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Tanl::TokenLink *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Tanl::TokenLink *)new Tanl::TokenLink();
  *(Tanl::TokenLink **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_TokenLink_1head_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Tanl::TokenLink *arg1 = (Tanl::TokenLink *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::TokenLink **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->head = arg2;
}


SWIGEXPORT jint JNICALL Java_jni_desrJNI_TokenLink_1head_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Tanl::TokenLink *arg1 = (Tanl::TokenLink *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::TokenLink **)&jarg1; 
  result = (int) ((arg1)->head);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_TokenLink_1label_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Tanl::TokenLink *arg1 = (Tanl::TokenLink *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::TokenLink **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->label = *arg2;
}


SWIGEXPORT jstring JNICALL Java_jni_desrJNI_TokenLink_1label_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Tanl::TokenLink *arg1 = (Tanl::TokenLink *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::TokenLink **)&jarg1; 
  result = (std::string *) & ((arg1)->label);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_delete_1TokenLink(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Tanl::TokenLink *arg1 = (Tanl::TokenLink *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Tanl::TokenLink **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_new_1Tag(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  Tanl::Tag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (Tanl::Tag *)new Tanl::Tag((std::string const &)*arg1);
  *(Tanl::Tag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_jni_desrJNI_Tag_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Tanl::Tag *arg1 = (Tanl::Tag *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Tag **)&jarg1; 
  result = ((Tanl::Tag const *)arg1)->open();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_jni_desrJNI_Tag_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Tanl::Tag *arg1 = (Tanl::Tag *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Tag **)&jarg1; 
  result = ((Tanl::Tag const *)arg1)->close();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_Tag_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Tanl::Tag *arg1 = (Tanl::Tag *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Tag **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_jni_desrJNI_Tag_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Tanl::Tag *arg1 = (Tanl::Tag *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Tag **)&jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_jni_desrJNI_Tag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  Tanl::Tag *arg1 = (Tanl::Tag *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Tag **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = Tanl_Tag___getitem__(arg1,(std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_Tag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Tanl::Tag *arg1 = (Tanl::Tag *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Tag **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  Tanl_Tag___setitem__(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_delete_1Tag(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Tanl::Tag *arg1 = (Tanl::Tag *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Tanl::Tag **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_new_1Context_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  Tanl::Context *arg2 = (Tanl::Context *) 0 ;
  Tanl::Context *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(Tanl::Context **)&jarg2; 
  result = (Tanl::Context *)new Tanl::Context((std::string const &)*arg1,arg2);
  *(Tanl::Context **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_new_1Context_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  Tanl::Context *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (Tanl::Context *)new Tanl::Context((std::string const &)*arg1);
  *(Tanl::Context **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_Context_1tag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Tanl::Context *arg1 = (Tanl::Context *) 0 ;
  Tanl::Tag *arg2 = (Tanl::Tag *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Tanl::Context **)&jarg1; 
  arg2 = *(Tanl::Tag **)&jarg2; 
  if (arg1) (arg1)->tag = *arg2;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_Context_1tag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Tanl::Context *arg1 = (Tanl::Context *) 0 ;
  Tanl::Tag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Context **)&jarg1; 
  result = (Tanl::Tag *)& ((arg1)->tag);
  *(Tanl::Tag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_Context_1parent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Tanl::Context *arg1 = (Tanl::Context *) 0 ;
  Tanl::Context *arg2 = (Tanl::Context *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Tanl::Context **)&jarg1; 
  arg2 = *(Tanl::Context **)&jarg2; 
  if (arg1) (arg1)->parent = arg2;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_Context_1parent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Tanl::Context *arg1 = (Tanl::Context *) 0 ;
  Tanl::Context *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Context **)&jarg1; 
  result = (Tanl::Context *) ((arg1)->parent);
  *(Tanl::Context **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_delete_1Context(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Tanl::Context *arg1 = (Tanl::Context *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Tanl::Context **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_new_1Token_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::string arg1 ;
  Tanl::Corpus *arg2 = 0 ;
  Tanl::Context *arg3 = (Tanl::Context *) 0 ;
  Tanl::Token *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(Tanl::Corpus **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tanl::Corpus & reference is null");
    return 0;
  } 
  arg3 = *(Tanl::Context **)&jarg3; 
  result = (Tanl::Token *)new Tanl::Token(arg1,*arg2,arg3);
  *(Tanl::Token **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_new_1Token_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::string arg1 ;
  Tanl::Corpus *arg2 = 0 ;
  Tanl::Token *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(Tanl::Corpus **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tanl::Corpus & reference is null");
    return 0;
  } 
  result = (Tanl::Token *)new Tanl::Token(arg1,*arg2);
  *(Tanl::Token **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_new_1Token_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::string arg1 ;
  Tanl::AttributeIndex *arg2 = (Tanl::AttributeIndex *) 0 ;
  Tanl::Context *arg3 = (Tanl::Context *) 0 ;
  Tanl::Token *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(Tanl::AttributeIndex **)&jarg2; 
  arg3 = *(Tanl::Context **)&jarg3; 
  result = (Tanl::Token *)new Tanl::Token(arg1,arg2,arg3);
  *(Tanl::Token **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_new_1Token_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::string arg1 ;
  Tanl::AttributeIndex *arg2 = (Tanl::AttributeIndex *) 0 ;
  Tanl::Token *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(Tanl::AttributeIndex **)&jarg2; 
  result = (Tanl::Token *)new Tanl::Token(arg1,arg2);
  *(Tanl::Token **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_new_1Token_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  std::string arg1 ;
  Tanl::Attributes *arg2 = 0 ;
  Tanl::TokenLinks *arg3 = 0 ;
  Tanl::Context *arg4 = (Tanl::Context *) 0 ;
  Tanl::Token *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg4_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(Tanl::Attributes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tanl::Attributes & reference is null");
    return 0;
  } 
  arg3 = *(Tanl::TokenLinks **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tanl::TokenLinks & reference is null");
    return 0;
  } 
  arg4 = *(Tanl::Context **)&jarg4; 
  result = (Tanl::Token *)new Tanl::Token(arg1,*arg2,*arg3,arg4);
  *(Tanl::Token **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_new_1Token_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  std::string arg1 ;
  Tanl::Attributes *arg2 = 0 ;
  Tanl::TokenLinks *arg3 = 0 ;
  Tanl::Token *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(Tanl::Attributes **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tanl::Attributes & reference is null");
    return 0;
  } 
  arg3 = *(Tanl::TokenLinks **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tanl::TokenLinks & reference is null");
    return 0;
  } 
  result = (Tanl::Token *)new Tanl::Token(arg1,*arg2,*arg3);
  *(Tanl::Token **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jni_desrJNI_Token_1attrIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Tanl::Token *arg1 = (Tanl::Token *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Token **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->attrIndex((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_Token_1form_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Tanl::Token *arg1 = (Tanl::Token *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Token **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->form = *arg2;
}


SWIGEXPORT jstring JNICALL Java_jni_desrJNI_Token_1form_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Tanl::Token *arg1 = (Tanl::Token *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Token **)&jarg1; 
  result = (std::string *) & ((arg1)->form);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_Token_1attributes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Tanl::Token *arg1 = (Tanl::Token *) 0 ;
  Tanl::Attributes *arg2 = (Tanl::Attributes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Tanl::Token **)&jarg1; 
  arg2 = *(Tanl::Attributes **)&jarg2; 
  if (arg1) (arg1)->attributes = *arg2;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_Token_1attributes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Tanl::Token *arg1 = (Tanl::Token *) 0 ;
  Tanl::Attributes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Token **)&jarg1; 
  result = (Tanl::Attributes *)& ((arg1)->attributes);
  *(Tanl::Attributes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_Token_1links_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Tanl::Token *arg1 = (Tanl::Token *) 0 ;
  Tanl::TokenLinks *arg2 = (Tanl::TokenLinks *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Token **)&jarg1; 
  arg2 = *(Tanl::TokenLinks **)&jarg2; 
  if (arg1) (arg1)->links = *arg2;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_Token_1links_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Tanl::Token *arg1 = (Tanl::Token *) 0 ;
  Tanl::TokenLinks *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Token **)&jarg1; 
  result = (Tanl::TokenLinks *)& ((arg1)->links);
  *(Tanl::TokenLinks **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_Token_1context(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Tanl::Token *arg1 = (Tanl::Token *) 0 ;
  Tanl::Context *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Token **)&jarg1; 
  result = (Tanl::Context *)Tanl_Token_context(arg1);
  *(Tanl::Context **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_jni_desrJNI_Token_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Tanl::Token *arg1 = (Tanl::Token *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Token **)&jarg1; 
  result = (char *)Tanl_Token___repr__(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  delete [] result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_Token_1setAttribute_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Tanl::Token *arg1 = (Tanl::Token *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Token **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  Tanl_Token___setitem____SWIG_0(arg1,(char const *)arg2,(char const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_Token_1setAttribute_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  Tanl::Token *arg1 = (Tanl::Token *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Token **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  Tanl_Token___setitem____SWIG_1(arg1,(char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_jni_desrJNI_Token_1getAttribute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  Tanl::Token *arg1 = (Tanl::Token *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Token **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)Tanl_Token___getitem__(arg1,(char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  delete [] result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_delete_1Token(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Tanl::Token *arg1 = (Tanl::Token *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Tanl::Token **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_new_1TreeToken(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  int arg1 ;
  Tanl::Token *arg2 = (Tanl::Token *) 0 ;
  Tanl::TreeToken *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (int)jarg1; 
  arg2 = *(Tanl::Token **)&jarg2; 
  result = (Tanl::TreeToken *)new Tanl::TreeToken(arg1,arg2);
  *(Tanl::TreeToken **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_TreeToken_1token_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Tanl::TreeToken *arg1 = (Tanl::TreeToken *) 0 ;
  Tanl::Token *arg2 = (Tanl::Token *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Tanl::TreeToken **)&jarg1; 
  arg2 = *(Tanl::Token **)&jarg2; 
  if (arg1) (arg1)->token = arg2;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_TreeToken_1token_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Tanl::TreeToken *arg1 = (Tanl::TreeToken *) 0 ;
  Tanl::Token *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::TreeToken **)&jarg1; 
  result = (Tanl::Token *) ((arg1)->token);
  *(Tanl::Token **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_TreeToken_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Tanl::TreeToken *arg1 = (Tanl::TreeToken *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::TreeToken **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_TreeToken_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Tanl::TreeToken *arg1 = (Tanl::TreeToken *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::TreeToken **)&jarg1; 
  result = (unsigned int) ((arg1)->id);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_TreeToken_1left_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Tanl::TreeToken *arg1 = (Tanl::TreeToken *) 0 ;
  std::vector< Tanl::TreeToken * > *arg2 = (std::vector< Tanl::TreeToken * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Tanl::TreeToken **)&jarg1; 
  arg2 = *(std::vector< Tanl::TreeToken * > **)&jarg2; 
  if (arg1) (arg1)->left = *arg2;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_TreeToken_1left_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Tanl::TreeToken *arg1 = (Tanl::TreeToken *) 0 ;
  std::vector< Tanl::TreeToken * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::TreeToken **)&jarg1; 
  result = (std::vector< Tanl::TreeToken * > *)& ((arg1)->left);
  *(std::vector< Tanl::TreeToken * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_TreeToken_1right_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Tanl::TreeToken *arg1 = (Tanl::TreeToken *) 0 ;
  std::vector< Tanl::TreeToken * > *arg2 = (std::vector< Tanl::TreeToken * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Tanl::TreeToken **)&jarg1; 
  arg2 = *(std::vector< Tanl::TreeToken * > **)&jarg2; 
  if (arg1) (arg1)->right = *arg2;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_TreeToken_1right_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Tanl::TreeToken *arg1 = (Tanl::TreeToken *) 0 ;
  std::vector< Tanl::TreeToken * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::TreeToken **)&jarg1; 
  result = (std::vector< Tanl::TreeToken * > *)& ((arg1)->right);
  *(std::vector< Tanl::TreeToken * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_jni_desrJNI_TreeToken_1form(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Tanl::TreeToken *arg1 = (Tanl::TreeToken *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::TreeToken **)&jarg1; 
  result = (std::string *) &(arg1)->form();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_TreeToken_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Tanl::TreeToken *arg1 = (Tanl::TreeToken *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::TreeToken **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (std::string *)(arg1)->get((char const *)arg2);
  *(std::string **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_TreeToken_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Tanl::TreeToken *arg1 = (Tanl::TreeToken *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::TreeToken **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->set((char const *)arg2,(char const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jint JNICALL Java_jni_desrJNI_TreeToken_1linkHead_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Tanl::TreeToken *arg1 = (Tanl::TreeToken *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::TreeToken **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((Tanl::TreeToken const *)arg1)->linkHead(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jni_desrJNI_TreeToken_1linkHead_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Tanl::TreeToken *arg1 = (Tanl::TreeToken *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::TreeToken **)&jarg1; 
  result = (int)((Tanl::TreeToken const *)arg1)->linkHead();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_jni_desrJNI_TreeToken_1linkLabel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  Tanl::TreeToken *arg1 = (Tanl::TreeToken *) 0 ;
  unsigned int arg2 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::TreeToken **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (std::string *) &((Tanl::TreeToken const *)arg1)->linkLabel(arg2);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_jni_desrJNI_TreeToken_1linkLabel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Tanl::TreeToken *arg1 = (Tanl::TreeToken *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::TreeToken **)&jarg1; 
  result = (std::string *) &((Tanl::TreeToken const *)arg1)->linkLabel();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_jni_desrJNI_TreeToken_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Tanl::TreeToken *arg1 = (Tanl::TreeToken *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::TreeToken **)&jarg1; 
  result = (char *)Tanl_TreeToken___repr__(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  delete [] result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_delete_1TreeToken(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Tanl::TreeToken *arg1 = (Tanl::TreeToken *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Tanl::TreeToken **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_new_1VectorTreeToken_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< Tanl::TreeToken * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< Tanl::TreeToken * > *)new std::vector< Tanl::TreeToken * >();
  *(std::vector< Tanl::TreeToken * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_new_1VectorTreeToken_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< Tanl::TreeToken * >::size_type arg1 ;
  std::vector< Tanl::TreeToken * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< Tanl::TreeToken * >::size_type)jarg1; 
  result = (std::vector< Tanl::TreeToken * > *)new std::vector< Tanl::TreeToken * >(arg1);
  *(std::vector< Tanl::TreeToken * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_VectorTreeToken_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Tanl::TreeToken * > *arg1 = (std::vector< Tanl::TreeToken * > *) 0 ;
  std::vector< Tanl::TreeToken * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Tanl::TreeToken * > **)&jarg1; 
  result = ((std::vector< Tanl::TreeToken * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_VectorTreeToken_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Tanl::TreeToken * > *arg1 = (std::vector< Tanl::TreeToken * > *) 0 ;
  std::vector< Tanl::TreeToken * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Tanl::TreeToken * > **)&jarg1; 
  result = ((std::vector< Tanl::TreeToken * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_VectorTreeToken_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< Tanl::TreeToken * > *arg1 = (std::vector< Tanl::TreeToken * > *) 0 ;
  std::vector< Tanl::TreeToken * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Tanl::TreeToken * > **)&jarg1; 
  arg2 = (std::vector< Tanl::TreeToken * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_jni_desrJNI_VectorTreeToken_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< Tanl::TreeToken * > *arg1 = (std::vector< Tanl::TreeToken * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Tanl::TreeToken * > **)&jarg1; 
  result = (bool)((std::vector< Tanl::TreeToken * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_VectorTreeToken_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< Tanl::TreeToken * > *arg1 = (std::vector< Tanl::TreeToken * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Tanl::TreeToken * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_VectorTreeToken_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< Tanl::TreeToken * > *arg1 = (std::vector< Tanl::TreeToken * > *) 0 ;
  std::vector< Tanl::TreeToken * >::value_type *arg2 = 0 ;
  std::vector< Tanl::TreeToken * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< Tanl::TreeToken * > **)&jarg1; 
  temp2 = *(std::vector< Tanl::TreeToken * >::value_type *)&jarg2;
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< Tanl::TreeToken * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_VectorTreeToken_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Tanl::TreeToken * > *arg1 = (std::vector< Tanl::TreeToken * > *) 0 ;
  int arg2 ;
  std::vector< Tanl::TreeToken * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Tanl::TreeToken * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Tanl::TreeToken * >::value_type *) &std_vector_Sl_Tanl_TreeToken_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< Tanl::TreeToken * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_VectorTreeToken_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< Tanl::TreeToken * > *arg1 = (std::vector< Tanl::TreeToken * > *) 0 ;
  int arg2 ;
  std::vector< Tanl::TreeToken * >::value_type *arg3 = 0 ;
  std::vector< Tanl::TreeToken * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Tanl::TreeToken * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(std::vector< Tanl::TreeToken * >::value_type *)&jarg3;
  arg3 = &temp3; 
  try {
    std_vector_Sl_Tanl_TreeToken_Sm__Sg__set(arg1,arg2,(Tanl::TreeToken *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_delete_1VectorTreeToken(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< Tanl::TreeToken * > *arg1 = (std::vector< Tanl::TreeToken * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< Tanl::TreeToken * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_jni_desrJNI_EnumeratorSentence_1MoveNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Tanl::Enumerator< Tanl::Sentence * > *arg1 = (Tanl::Enumerator< Tanl::Sentence * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Enumerator< Tanl::Sentence * > **)&jarg1; 
  result = (bool)(arg1)->MoveNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_EnumeratorSentence_1Current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Tanl::Enumerator< Tanl::Sentence * > *arg1 = (Tanl::Enumerator< Tanl::Sentence * > *) 0 ;
  Tanl::Enumerator< Tanl::Sentence * >::ItemType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Enumerator< Tanl::Sentence * > **)&jarg1; 
  result = (Tanl::Enumerator< Tanl::Sentence * >::ItemType)(arg1)->Current();
  *(Tanl::Enumerator< Tanl::Sentence * >::ItemType *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_EnumeratorSentence_1Reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Tanl::Enumerator< Tanl::Sentence * > *arg1 = (Tanl::Enumerator< Tanl::Sentence * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Enumerator< Tanl::Sentence * > **)&jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_delete_1EnumeratorSentence(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Tanl::Enumerator< Tanl::Sentence * > *arg1 = (Tanl::Enumerator< Tanl::Sentence * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Tanl::Enumerator< Tanl::Sentence * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_EnumeratorSentence_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Tanl::Enumerator< Tanl::Sentence * > *arg1 = (Tanl::Enumerator< Tanl::Sentence * > *) 0 ;
  Tanl::Sentence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Enumerator< Tanl::Sentence * > **)&jarg1; 
  result = (Tanl::Sentence *)Tanl_Enumerator_Sl_Tanl_Sentence_Sm__Sg__next(arg1);
  *(Tanl::Sentence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_jni_desrJNI_EnumeratorSentence_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Tanl::Enumerator< Tanl::Sentence * > *arg1 = (Tanl::Enumerator< Tanl::Sentence * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Enumerator< Tanl::Sentence * > **)&jarg1; 
  result = (bool)Tanl_Enumerator_Sl_Tanl_Sentence_Sm__Sg__hasNext(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_new_1Sentence_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Tanl::Language *arg1 = (Tanl::Language *) 0 ;
  Tanl::Sentence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Language **)&jarg1; 
  result = (Tanl::Sentence *)new Tanl::Sentence((Tanl::Language const *)arg1);
  *(Tanl::Sentence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_new_1Sentence_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Tanl::Sentence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Tanl::Sentence *)new Tanl::Sentence();
  *(Tanl::Sentence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_Sentence_1language_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Tanl::Sentence *arg1 = (Tanl::Sentence *) 0 ;
  Tanl::Language *arg2 = (Tanl::Language *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Tanl::Sentence **)&jarg1; 
  arg2 = *(Tanl::Language **)&jarg2; 
  if (arg1) (arg1)->language = (Tanl::Language const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_Sentence_1language_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Tanl::Sentence *arg1 = (Tanl::Sentence *) 0 ;
  Tanl::Language *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Sentence **)&jarg1; 
  result = (Tanl::Language *) ((arg1)->language);
  *(Tanl::Language **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_Sentence_1deref(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Tanl::Sentence *arg1 = (Tanl::Sentence *) 0 ;
  Tanl::Sentence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Sentence **)&jarg1; 
  result = (Tanl::Sentence *) &Tanl_Sentence_deref(arg1);
  *(Tanl::Sentence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_jni_desrJNI_Sentence_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Tanl::Sentence *arg1 = (Tanl::Sentence *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::Sentence **)&jarg1; 
  result = (char *)Tanl_Sentence___repr__(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  delete [] result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_delete_1Sentence(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Tanl::Sentence *arg1 = (Tanl::Sentence *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Tanl::Sentence **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_new_1SentenceReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::istream *arg1 = (std::istream *) 0 ;
  Tanl::Corpus *arg2 = (Tanl::Corpus *) 0 ;
  Tanl::SentenceReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(std::istream **)&jarg1; 
  arg2 = *(Tanl::Corpus **)&jarg2; 
  result = (Tanl::SentenceReader *)new Tanl::SentenceReader(arg1,arg2);
  *(Tanl::SentenceReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_jni_desrJNI_SentenceReader_1MoveNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Tanl::SentenceReader *arg1 = (Tanl::SentenceReader *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::SentenceReader **)&jarg1; 
  result = (bool)(arg1)->MoveNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_SentenceReader_1Current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Tanl::SentenceReader *arg1 = (Tanl::SentenceReader *) 0 ;
  Tanl::Sentence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tanl::SentenceReader **)&jarg1; 
  result = (Tanl::Sentence *)(arg1)->Current();
  *(Tanl::Sentence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_delete_1SentenceReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Tanl::SentenceReader *arg1 = (Tanl::SentenceReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Tanl::SentenceReader **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_Parser_1create(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  Parser::Parser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (Parser::Parser *)Parser::Parser::create((char const *)arg1);
  *(Parser::Parser **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_Parser_1pipe_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Parser::Parser *arg1 = (Parser::Parser *) 0 ;
  Tanl::Enumerator< Tanl::Sentence * > *arg2 = 0 ;
  Tanl::Enumerator< Tanl::Sentence * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Parser::Parser **)&jarg1; 
  arg2 = *(Tanl::Enumerator< Tanl::Sentence * > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tanl::Enumerator< Tanl::Sentence * > & reference is null");
    return 0;
  } 
  result = (Tanl::Enumerator< Tanl::Sentence * > *)(arg1)->pipe(*arg2);
  *(Tanl::Enumerator< Tanl::Sentence * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_Parser_1pipe_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Parser::Parser *arg1 = (Parser::Parser *) 0 ;
  Tanl::Enumerator< std::vector< Tanl::Token * > * > *arg2 = 0 ;
  Tanl::Enumerator< Tanl::Sentence * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Parser::Parser **)&jarg1; 
  arg2 = *(Tanl::Enumerator< std::vector< Tanl::Token * > * > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tanl::Enumerator< std::vector< Tanl::Token * > * > & reference is null");
    return 0;
  } 
  result = (Tanl::Enumerator< Tanl::Sentence * > *)(arg1)->pipe(*arg2);
  *(Tanl::Enumerator< Tanl::Sentence * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_Parser_1parse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Parser::Parser *arg1 = (Parser::Parser *) 0 ;
  Tanl::Sentence *arg2 = (Tanl::Sentence *) 0 ;
  Tanl::Sentence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Parser::Parser **)&jarg1; 
  arg2 = *(Tanl::Sentence **)&jarg2; 
  result = (Tanl::Sentence *)(arg1)->parse(arg2);
  *(Tanl::Sentence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_Parser_1showPerplexity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Parser::Parser *arg1 = (Parser::Parser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Parser::Parser **)&jarg1; 
  Parser_Parser_showPerplexity(arg1);
}


SWIGEXPORT void JNICALL Java_jni_desrJNI_delete_1Parser(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Parser::Parser *arg1 = (Parser::Parser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Parser::Parser **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_jni_desrJNI_SWIGContextUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Tanl::RefCountable **)&baseptr = *(Tanl::Context **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_jni_desrJNI_SWIGEnumeratorSentenceUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Tanl::Disposable **)&baseptr = *(Tanl::Enumerator< Tanl::Sentence * > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_jni_desrJNI_SWIGSentenceUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(std::vector< Tanl::TreeToken * > **)&baseptr = *(Tanl::Sentence **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_jni_desrJNI_SWIGSentenceReaderUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Tanl::Enumerator< Tanl::Sentence * > **)&baseptr = *(Tanl::SentenceReader **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_jni_desrJNI_SWIGParserUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Tanl::RefCountable **)&baseptr = *(Parser::Parser **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

