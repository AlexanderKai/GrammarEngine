#define yyFlexLexer ptbFlexLexer

#line 4 "PtbTokenizer.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <fstream>
using std::istream;
using std::ostream;
#ifndef _WIN32
#include <unistd.h>
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif


/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include "FlexLexer.h"


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 53
#define YY_END_OF_BUFFER 54
static yyconst short int yy_acclist[890] =
    {   0,
       43,   43,   54,   52,   53,   50,   52,   53,   53,   45,
       52,   53,   28,   52,   53,   17,   42,   52,   53,   17,
       52,   53,   31,   52,   53,   31,   52,   53,   29,   52,
       53,   38,   52,   53,   39,   52,   53,   43,   52,   53,
       30,   52,   53,   44,   52,   53,   40,   52,   53,   45,
       52,   53,   47,   52,   53,   14,   52,   53,   14,   52,
       53,   44,   52,   53,   34,   52,   53,   46,   52,   53,
       35,   52,   53,   42,   52,   53,    7,   52,   53,16389,
    16406,    7,   52,   53,16389,16406,    7,   52,   53,16389,
    16406,    7,   52,   53,16389,16406,    7,   52,   53,16389,

    16406,    7,   52,   53,16389,16406,    7,   52,   53,16389,
    16406,    7,   52,   53,16389,16406,    7,   52,   53,16389,
    16406,    7,   52,   53,16389,16406,    7,   52,   53,16389,
    16406,    7,   52,   53,16389,16406,    7,   52,   53,16389,
    16406,    7,   52,   53,16389,16406,    7,   52,   53,16389,
    16406,    7,   52,   53,16389,16406,    7,   52,   53,16389,
    16406,    7,   52,   53,16389,16406,    7,   52,   53,16389,
    16406,    7,   52,   53,16389,16406,    7,   52,   53,16389,
    16406,    7,   52,   53,16389,16406,   34,   52,   53,   33,
       43,   52,   53,   32,   52,   53,   42,   52,   53,   29,

       52,   53,    7,   52,   53,16389,16406,    7,   52,   53,
    16389,16406,    7,   52,   53,16389,16406,    7,   52,   53,
    16389,16406,    7,   52,   53,16389,    7,   52,   53,16389,
        7,   52,   53,16389,    7,   52,   53,16389,    7,   52,
       53,16389,    7,   52,   53,16389,    7,   52,   53,16389,
    16405,    7,   52,   53,16389,    7,   52,   53,16389,16406,
       36,   52,   53,   33,   52,   53,   37,   52,   53,   29,
       52,   53,   50,   52,   53,   50,   27,   42,   29,   43,
       14,   14,   40,   14,   49,   49,   49,   42, 8214,   17,
       20,    7,   49,16389,    7,   49,16389,    7,   49,16389,

        7,   49,16389,    7,   49,16389,    7,   49,16389,    7,
       49,16389,    7,   49,16389,    7,   49,16389,    7,   49,
    16389,    7,   49,16389,    7,   49,16389,16405,    7,   49,
    16389,    7,   49,16389,    7,   49,16389,16405,    7,   49,
    16389,    7,   49,16389,16406,    7,   49,16389,    7,   49,
    16389,    7,   49,16389,    7,   49,16389,    7,   49,16389,
        7,   49,16389,16405,    7,   49,16389,    7,   49,16389,
        7,   49,16389,    7,   49,16389,    7,   49,16389,    7,
       49,16389,    7,   49,16389,16405,    7,   49,16389,    7,
       49,16389,    7,   49,16389,    7,   49,16389,16406,    7,

       49,16389,    7,   49,16389,    7,   49,16389,    7,   49,
    16389,16405,    7,   49,16389,16406,    7,   49,16389,    7,
       49,16389,    7,   49,16389,    7,   49,16389,16405,    7,
       49,16389,    7,   49,16389,    7,   49,16389,    7,   49,
    16389,16405,    7,   49,16389,    7,   49,16389,    7,   49,
    16389,    7,   49,16389,    7,   49,16389,    7,   49,16389,
        7,   49,16389,    7,   49,16389,    7,   49,16389,    7,
       49,16389,    7,   49,16389,    7,   49,16389,    7,   49,
    16389,   20,    7,   49,16389,    7,   49,16389,    7,   49,
    16389,    7,   49,16389,   43,   42, 8214,   20,   49,    7,

       49,16389,    7,   49,16389,    7,   49,16389,    7,   49,
    16389,    7,   49,16389, 8213,   19,16402,   10,    8,   14,
       41,   14,   15,   16,   16,   14,   49,   49,   49,    1,
       49,    4,   49,   49,   49,   49,   49,   49,   25,   25,
    16406,16407,    7,   49,16389,    7,   49,16389,    7,   49,
    16389,   49,    7,   49,16389,    7,   49,16389,    7,   49,
    16389,    4,   19,16402,    7,   49,16389,    7,   49,16389,
    16405,    7,   49,16389,    7,   49,16389,    7,   49,16389,
        7,   49,16389,16406,    7,   49,16389,    7,   49,16389,
        7,   49,16389,16405,    4,    4,   20,    7,   49,16389,

        7,   49,16389,16405,    7,   49,16389,16406,    7,   49,
    16389,16405,    7,   49,16389,    7,   49,16389,16405,    7,
       49,16389,    7,   49,16389,    7,   49,16389,    7,   49,
    16389,    7,   49,16389,    7,   49,16389,    7,   49,16389,
    16405,   12,    7,   49,16389,    7,   49,16389,    7,   49,
    16389,16406,   49,    7,   49,16389,16406,    7,   49,16389,
    16405,    7,   49,16389,    7,   49,16389,    7,   49,16389,
        7,   49,16389,    7,   49,16389,    7,   49,16389,16405,
        7,   49,16389,16405,16406,16407,    7,   49,16389,16406,
    16407,16405,16406,16407,   16,   49,    7,   49,16389,   49,

        7,   49,16389,    7,   49,16389,    8,    3,    2,    3,
       11,    8,   41,   48,   48,   48,   48,   15,   16,   15,
       16,   33,   49, 8197,   48,   48,   49, 8214, 8215, 8215,
       20,    6,    7,   49,16389,    7,   49,16389,    7,   49,
    16389,16405, 8197, 8197,    7,   49,16389,    7,   49,16389,
        7,   49,16389,    7,   49,16389,    7,   49,16389,16406,
    16408,    7,   49,16389,    7,   49,16389,    7,   49,16389,
        7,   49,16389,   20,   48,   48, 8214, 8215,   20, 8213,
     8214, 8215,   19,   20,16402,   16,   49,    7,   49,16389,
        7,   49,16389,   49,    7,   49,16389, 8210, 8210,    8,

       14,   41,   41,   16,   16,    7,   49,16389,   48,   48,
       48,    7,   49,16389,    7,   49,16389,    7,   49,16389,
     8216,    7,   49,16389,    7,   49,16389,16406,16406,16406,
    16406,16406,16406,16406,16407,   16,16406,   16,16406,   49,
    16406,   49,16406,16406,    7,16389,   51,   28,   13,   13,
       48,   13,   16,    7,   49,16389,    7,   49,16389,   20,
       20, 8214,   48,   20,   20,   41,   13,   13,   48,   13,
       16,    8,    7,   49,16389,16406,16407,   13,   13,   13,
       16,    7,   49,16389,16406,16407,   20,    9,   26
    } ;

static yyconst short int yy_accept[593] =
    {   0,
        1,    2,    3,    4,    6,    9,   10,   13,   16,   20,
       23,   26,   29,   32,   35,   38,   41,   44,   47,   50,
       53,   56,   59,   62,   65,   68,   71,   74,   77,   82,
       87,   92,   97,  102,  107,  112,  117,  122,  127,  132,
      137,  142,  147,  152,  157,  162,  167,  172,  177,  182,
      187,  190,  194,  197,  200,  203,  208,  213,  218,  223,
      227,  231,  235,  239,  243,  247,  252,  256,  261,  264,
      267,  270,  273,  276,  277,  278,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  280,  280,  280,  280,  280,  280,

      280,  280,  280,  280,  280,  280,  280,  280,  280,  281,
      281,  282,  283,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  286,  287,  287,  287,  288,  288,  288,  289,
      290,  291,  291,  291,  291,  291,  292,  292,  295,  298,
      298,  298,  301,  304,  307,  310,  313,  316,  319,  322,
      325,  325,  329,  332,  335,  339,  339,  342,  346,  349,
      352,  355,  358,  361,  365,  368,  371,  374,  377,  380,
      383,  387,  390,  393,  396,  400,  403,  406,  409,  413,
      417,  417,  420,  423,  426,  430,  433,  436,  439,  443,
      446,  449,  452,  455,  455,  458,  461,  464,  467,  470,

      473,  476,  479,  482,  483,  486,  489,  492,  495,  496,
      497,  497,  498,  498,  498,  498,  498,  499,  499,  500,
      503,  506,  506,  506,  506,  506,  506,  509,  512,  512,
      515,  516,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  519,  520,
      520,  520,  520,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  522,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  525,  526,  528,  528,  529,  530,  530,  531,
      532,  533,  533,  533,  533,  533,  533,  533,  533,  534,
      535,  536,  537,  538,  539,  540,  541,  543,  543,  546,

      549,  549,  552,  553,  556,  559,  562,  563,  565,  568,
      572,  575,  578,  581,  585,  588,  591,  595,  595,  595,
      596,  596,  596,  596,  597,  597,  597,  597,  598,  601,
      605,  609,  613,  616,  620,  623,  626,  629,  632,  635,
      638,  642,  643,  646,  649,  653,  654,  658,  662,  665,
      668,  671,  674,  677,  681,  685,  687,  690,  690,  690,
      690,  692,  695,  696,  697,  700,  701,  704,  707,  707,
      708,  708,  709,  711,  711,  711,  711,  711,  711,  711,
      711,  712,  713,  713,  713,  713,  714,  715,  716,  717,
      717,  718,  718,  718,  718,  718,  718,  718,  718,  718,

      718,  720,  720,  722,  724,  725,  726,  727,  728,  730,
      731,  732,  733,  733,  736,  739,  743,  743,  743,  743,
      743,  743,  744,  745,  748,  751,  754,  757,  761,  762,
      762,  765,  768,  771,  774,  775,  775,  775,  775,  776,
      777,  777,  777,  779,  780,  783,  786,  786,  787,  787,
      788,  788,  788,  788,  788,  788,  791,  794,  795,  798,
      798,  798,  799,  799,  800,  800,  800,  800,  800,  800,
      800,  800,  801,  802,  802,  803,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  805,  806,  809,  810,
      810,  811,  811,  812,  815,  818,  821,  822,  822,  825,

      829,  829,  830,  831,  832,  833,  834,  836,  838,  840,
      842,  844,  845,  845,  845,  845,  845,  845,  845,  845,
      847,  848,  849,  849,  849,  849,  850,  851,  851,  851,
      851,  851,  851,  852,  854,  857,  857,  860,  860,  861,
      862,  864,  865,  866,  866,  866,  866,  866,  866,  866,
      867,  868,  869,  869,  869,  870,  870,  872,  873,  876,
      876,  876,  878,  878,  878,  879,  880,  880,  880,  882,
      885,  887,  887,  887,  888,  888,  888,  888,  888,  889,
      889,  889,  889,  889,  889,  889,  889,  889,  889,  890,
      890,  890

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    4,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       23,   23,   23,   23,   24,   23,   23,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   55,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,

       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
       86,   87,   88,   89,   90,   91,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   92,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[94] =
    {   0,
        1,    2,    3,    4,    2,    5,    4,    1,    6,    7,
        8,    9,    4,    4,    1,   10,    7,   11,   12,   13,
       14,   14,   14,   14,   15,   16,   17,    1,    4,    1,
        1,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,    1,   19,    1,    1,   20,
        1,   21,   22,   22,   22,   21,   22,   22,   22,   21,
       22,   22,   22,   22,   22,   21,   22,   22,   22,   22,
       22,   21,   22,   22,   22,   22,   22,    1,    4,    1,
        1,    9,    1

    } ;

static yyconst short int yy_base[626] =
    {   0,
        0,    0, 1553, 5059,   92, 5059, 5059,    0, 1540, 5059,
     5059,   90,  161,   82, 5059, 1532,   91,   96,  126,  104,
     5059,  198,  228, 5059, 1526, 5059, 5059, 1505,  287,   97,
      331,  194,  338,  315,  360,  367,  382,  389,  405,  433,
      456,  478,  499,  515,  420,  534,  556,  567,  580,  602,
     5059, 1477, 5059, 1469, 1467,  688,  780,  871,   90,  188,
      397,  804,  134,  822,  522,  809,  810,  109, 5059, 5059,
     5059, 1515, 5059,  130, 5059, 1514,  207, 1477, 1436, 1437,
     1401,   97, 1392, 1383,  200, 1366,   99, 1345, 1343, 1357,
     1348,  213, 1321, 5059, 1380, 1332,    0, 1318, 1348, 1353,

     1336, 1297,   99, 1291, 1285, 1288,  242,  825, 1330,  293,
      835,  886, 1326,  149,  153, 1321, 1320, 1316,  544,  898,
      361,  934,  917, 1310, 1264,  951, 1291, 1298, 1282,  207,
     5059,  954,  952,  967, 1039, 1117,    0, 1135,  383, 1292,
     1217, 1039, 1227, 1229, 1271, 1273, 1277, 1292, 1298, 1303,
     1288,  458, 1323, 1331, 1354, 1426, 1512,  220, 1513, 1514,
     1518, 1533, 1537, 1040, 1538, 1539,  872, 1560, 1572, 1568,
     1581, 1596, 1597, 1616,  482, 1622, 1637, 1646, 1665,  412,
     1723,   55, 1673, 1678, 1694, 1713, 1722, 1742, 1740, 1766,
     1779, 1788, 1807,  604, 1808, 1816, 1831, 1835, 1837, 1273,

     1857, 1858, 1870, 1395, 1876, 1900, 1901, 1902, 1250, 1242,
     1226,  384,  106,  937, 1881, 1948, 1985, 1221, 1368, 1933,
     1972,  273,  212,  561, 1214,   83, 1961, 1939, 2002, 2010,
      252,  547,  809, 1233, 1248, 1221, 1178, 1161, 1161, 1156,
     1113, 1088, 1069, 1070, 1061, 1053, 1048, 5059, 5059,    0,
     1056, 1385, 5059, 2069, 1095, 1067, 1007, 1001,  995,  990,
     1010,  993, 2082, 2107, 1433, 2183, 2190, 2050, 2197, 2204,
     2211, 1046,  992, 2236,  765,  940, 2252,  968, 5059,    0,
     5059,  949,  952,  948,  906,  901,  900, 1142, 2309,  900,
      887,  869,  871,  919,  915, 5059,  859,  964,    0,  534,

      143,  168,    0, 2280, 2279, 2295,  215, 2365,  883,  433,
     2303, 2374, 2387,  464, 2392, 2396, 2031,  844, 2478,    0,
      857,  863,  843,  805,  227,  126,  340, 1021, 2405, 2411,
      868, 2416, 2443, 2532, 2473, 2481, 2538, 2540, 2544, 2562,
     2566, 5059, 2564, 2582,  906,  783, 2231, 2586, 2591, 2610,
     2615,  821, 2626, 2638, 2657, 2016, 2658,    0, 2750, 2843,
     2936, 2060, 3029, 3122, 3215, 3308, 2692, 2726,  778, 2747,
      649, 5059, 5059,  763,  781,  765,  756,  749,  732,  725,
     5059,  711, 2691,  765,  672,  668, 5059, 2936,  772,  796,
     3381,    0, 2420, 2218, 2669, 3388,  633, 3396,  847, 1074,

     2316,    0, 2436, 2775, 5059,    0, 3461, 3538,  373,  653,
     1420, 5059,  273, 2721, 3425, 2727, 3598,  622, 1288, 3681,
     3731,    0,    0, 3741, 3743, 3427, 3785,  501,  805, 3757,
     3797, 3793, 3881, 3967, 2981,  615,  284, 3820,  609,    0,
      607, 2951,  921, 3430, 1051, 3972,  598,  616,  986, 3849,
       75,  457, 1493, 3957, 1219, 4006, 4015,  468, 4027,  417,
      572, 1324,  621, 5059,  549,  545,  598,  549,  582,  580,
      535, 5059, 1353, 2993,  585, 5059, 2961, 1202,  570, 3682,
     4033, 3828, 3444,  568, 3437, 1359,    0, 4059,  525, 4151,
     1668,    0,    0, 3997, 4211, 4212, 1191,  494, 4080, 1657,

      496,  910, 1744, 4082, 1592, 4091, 2246, 1621, 1846, 4216,
     1994, 4060,  522, 4111,  473,  502,  489,  439,  434, 1700,
     5059,    0, 1461, 1801,  477, 3545, 1870, 4304, 4228, 4245,
     4235,  456,  507, 1964, 4282,  387, 4276, 4318, 5059,  416,
      385,    0,    0,  410,  379,  340,  362,  849, 2017,  296,
     4123, 2074, 4327, 4349,  521, 4357, 2280, 4390, 4386,  570,
        0, 2597,  400,  275, 4386, 5059, 4393,  240,    0, 4417,
     2663,  260, 4429,  252, 2410,  623,  237,  423, 4466, 2448,
      218,  214,  169, 2698,  430,  128, 2793,  140, 5059,   47,
     5059, 4551, 4567, 4585, 4606, 4628, 4642, 4651, 4660, 4669,

     4691, 4706, 4721, 4743, 4750, 4772, 4794, 4815, 4820, 1000,
     4829, 4841, 4857, 4873, 4882, 4897, 4911, 4920, 4938, 4960,
     4975, 4992, 1266, 5014, 5036
    } ;

static yyconst short int yy_def[626] =
    {   0,
      591,    1,  591,  591,  591,  591,  591,  592,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  593,  593,  591,  594,  591,  591,  591,  591,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
      591,  591,  591,  591,  591,  591,  595,  595,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,  591,  591,
      591,   13,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  596,  591,  591,  591,

      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  597,  597,  598,
      599,  593,  593,  591,  600,  593,  601,  594,  591,  591,
      591,  602,  591,  602,  591,  603,  599,  591,  138,  591,
      600,   58,   58,   58,   58,   58,   58,   58,   58,   58,
      591,  138,   58,   58,   58,  591,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,  138,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
      591,  138,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,  134,   58,   58,   58,   58,   58,  138,

       58,   58,   58,  603,   58,   58,   58,   58,  591,  591,
      591,  591,  597,  591,  591,  598,  603,  599,  593,   58,
       58,  591,  600,  591,  216,  217,   58,   58,  591,   58,
      591,  217,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  604,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  597,  591,  264,  264,  264,  264,  264,  264,
      264,  599,  599,  593,  599,  600,  593,  601,  591,  134,
      591,  591,  591,  591,  591,  591,  591,  264,  264,  289,
      289,  289,  289,  289,  597,  591,  597,  597,  138,  138,

      181,  138,  141,   58,   58,   58,  591,  597,  138,  138,
       58,   58,   58,   58,   58,   58,   58,  605,  605,  319,
      319,  319,  319,  605,  605,  605,  605,  597,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,  591,   58,   58,   58,  134,   58,   58,   58,   58,
       58,  138,   58,   58,   58,  597,   58,  606,  607,  591,
      607,  597,  591,  591,  591,  591,   58,   58,  591,  591,
      608,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  609,  591,  264,
      609,  610,  264,  264,  264,  264,  610,  264,  611,  591,

      612,  611,  612,  613,  591,  134,  591,  264,  591,  591,
      614,  591,  591,   58,   58,   58,  591,  615,  616,  417,
      615,  420,  417,   58,   58,   58,   58,   58,  591,  591,
       58,   58,  591,   58,  614,  591,  617,  609,  591,  438,
      610,  264,  591,  614,  591,  614,  611,  612,  612,  613,
      591,  618,  591,  591,  617,   58,   58,  618,   58,  438,
      591,  608,  619,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  264,  591,  591,  264,
      264,  264,  264,  591,  264,  611,  611,   58,  615,  591,
      616,  420,  421,   58,   58,   58,  591,  591,   58,  433,

      438,  591,  617,  264,  591,  264,  617,  611,  612,  613,
      618,  591,  591,  264,  591,  620,  619,  591,  591,  621,
      591,  622,  591,  591,  591,  264,  591,  610,  264,  264,
      264,  528,  438,  611,   58,  591,   58,  264,  591,  617,
      591,  623,  528,  591,  623,  591,  620,  591,  591,  591,
      264,  591,  264,  264,  438,  264,  611,  591,   58,  623,
      624,  591,  591,  591,  264,  591,  264,  623,  611,   58,
      591,  591,  625,  528,  591,  623,  591,  528,  625,  591,
      591,  591,  591,  591,  528,  528,  591,  591,  591,  528,
        0,  591,  591,  591,  591,  591,  591,  591,  591,  591,

      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591
    } ;

static yyconst short int yy_nxt[5153] =
    {   0,
        4,    5,    6,    4,    5,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   23,   23,   18,   24,   25,   26,   27,    7,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   36,   45,   46,
       47,   48,   49,   50,   36,   51,   52,   27,   53,   54,
       55,   56,   57,   57,   58,   59,   60,   61,   62,   61,
       61,   61,   63,   61,   64,   65,   66,   61,   61,   67,
       61,   61,   68,   61,   61,   61,   61,   69,   70,   71,
       53,   72,   73,   74,  137,  581,   74,   77,  107,  302,

      107,  133,  108,  108,  108,  108,  107,  110,  116,  110,
      249,  111,  111,  111,  111,  110,  112,  112,  112,  112,
      133,   78,  117,  225,  112,  112,  112,  112,   79,  184,
      235,   74,   80,   81,   74,  591,  502,   82,  591,  235,
       83,   84,  110,  113,  110,  235,  111,  111,  111,  111,
      110,   85,  226,   86,  297,   87,  297,   88,  590,   87,
      237,  142,   89,   90,   91,   92,  238,   93,  114,  142,
      160,   87,   94,  142,  115,  150,  571,  359,  142,  142,
      240,  133,  255,   95,   95,  418,  258,  586,  158,  591,
      249,  423,  591,  412,   96,   97,   98,  256,  257,  133,

      133,  259,  260,   99,   97,  156,  226,  118,  130,  100,
       97,  130,  302,  101,  119,  120,  119,  121,  122,  122,
      122,  122,  110,  412,   96,   97,   98,  233,  233,  233,
      233,  133,  585,  102,   97,  103,  528,  118,  328,  104,
       97,  105,  184,  106,  119,  120,  119,  121,  122,  122,
      122,  122,  110,  231,  124,  532,  231,  125,  142,  157,
      413,  237,  252,  252,  252,  252,  142,  238,  189,  555,
      142,  125,  158,  239,  237,  159,  142,  244,  578,  133,
      238,  240,  126,  366,  124,  156,  418,  125,  130,  577,
      413,  130,  137,  476,  240,  131,  118,  132,  133,  423,

      564,  225,  134,  118,  135,  136,  137,  123,  123,  123,
      123,  133,  134,  112,  112,  112,  112,  249,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  139,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  151,  140,  358,  503,  141,  249,  142,  142,
      142,  143,  142,  142,  142,  142,  142,  142,  142,  144,
      142,  145,  142,  146,  142,  147,  142,  142,  148,  149,
      142,  142,  142,  142,  409,  410,  152,  409,  133,  142,
      161,  272,  272,  272,  272,  130,  130,  162,  130,  130,
      464,  142,  153,  163,  301,  142,  142,  142,  591,  418,

      154,  591,  142,  142,  575,  423,  155,  142,  133,  142,
      142,  249,  142,  142,  142,  226,  142,  575,  160,  142,
      142,  164,  151,  133,  142,  165,  167,  302,  562,  561,
      328,  142,  142,  225,  231,  166,  142,  231,  142,  142,
      555,  142,  142,  142,  156,  142,  142,  555,  142,  142,
      170,  308,  249,  142,  168,  358,  169,  184,  142,  231,
      142,  142,  231,  142,  142,  142,  173,  171,  514,  142,
      172,  142,  583,  555,  301,  133,  308,  142,  265,  588,
      174,  142,  328,  142,  142,  193,  142,  142,  133,  181,
      164,  158,  142,  133,  164,  550,  142,  142,  142,  467,

      328,  142,  142,  133,  467,  142,  309,  310,  591,  142,
      156,  142,  133,  175,  142,  142,  125,  176,  511,  328,
      164,  177,  182,  591,  156,  178,  591,  125,  142,  511,
      464,  179,  142,  229,  180,  158,  546,  142,  142,  164,
      226,  544,  142,  183,  194,  301,  317,  538,  371,  371,
      142,  371,  184,  185,  142,  133,  142,  265,  556,  142,
      142,  225,  186,  142,  263,  263,  263,  263,  265,  181,
      187,  142,  567,  133,  536,  142,  164,  188,  302,  142,
      142,  142,  265,  189,  418,  204,  532,  190,  528,  525,
      156,  142,  133,  191,  230,  192,  142,  142,  142,  195,

      249,  196,  197,  198,  200,  522,  142,  521,  184,  199,
      142,  571,  171,  229,  158,  142,  142,  236,  297,  572,
      142,  201,   87,  520,  202,  301,   87,  519,  142,  518,
       87,  142,  142,  402,  142,  591,   87,  203,  142,  142,
      517,  164,   87,  142,  142,  142,  346,  515,  142,  142,
      462,  462,  142,  462,  410,  410,  142,  410,  142,  508,
      164,  142,  142,  205,  581,   87,  142,  206,  505,   87,
      502,  207,  582,   87,  142,  463,  502,  509,  142,   87,
      142,  418,  484,  142,  142,   87,  476,  208,  211,  212,
      475,  211,  212,  211,  211,  211,  211,  213,  214,  215,

      211,  211,  211,  211,  213,  216,  217,  218,  219,  219,
      219,  219,  211,  211,  211,  211,  211,  211,  211,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  221,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  211,  222,  211,  211,  223,  211,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  221,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  211,  211,  211,  211,  215,
      211,  130,  429,  472,  130,  403,  403,  403,  403,  118,
      224,  133,  478,  478,  478,  478,  118,  225,  136,  137,

      123,  123,  123,  123,  471,  591,  497,  497,  591,  497,
      231,  591,  470,  231,  591,  133,  288,  288,  288,  288,
      133,  133,  226,  591,  145,  469,  591,  232,  226,  233,
      233,  233,  233,  181,  372,  468,  140,  467,  253,  125,
      226,  107,  466,  107,  465,  254,  254,  254,  254,  107,
      461,  110,  433,  110,  145,  111,  111,  111,  111,  110,
      409,  410,  429,  409,  418,  296,  184,  486,  486,  486,
      486,  133,  130,  296,  296,  130,  225,  411,  422,  301,
      118,  224,  156,  301,  227,  199,  328,  118,  225,  136,
      137,  123,  123,  123,  123,  133,  184,  228,  422,  422,

      133,  133,  110,  418,  110,  310,  112,  112,  112,  112,
      110,  130,  184,  181,  130,  145,  302,  133,  264,  264,
      264,  264,  409,  410,  328,  409,  118,  140,  539,  310,
      125,  266,  225,  118,  225,  118,  137,  397,  267,  268,
      396,  591,  184,  118,  395,  145,  184,  269,  394,  270,
      119,  120,  119,  121,  274,  274,  274,  274,  110,  301,
      118,  393,  156,  301,  134,  405,  405,  118,  225,  118,
      137,  134,  271,  140,  277,  591,  125,  134,  405,  134,
      295,  225,  502,  405,  134,  428,  281,  405,  296,  296,
      124,  405,  134,  125,  282,  281,  279,  133,   87,  125,

      283,  281,   87,  591,  284,  591,   87,  140,  358,  402,
      125,  386,   87,  134,  385,   87,  281,  479,   87,   87,
      479,  479,  384,   87,  285,  281,  134,  384,  591,   87,
      286,  281,  591,  384,  287,   87,  591,  295,  225,  384,
      591,  231,  591,  591,  231,  296,  296,  509,  591,  134,
      133,  133,  445,  410,  280,  445,  134,  298,  308,  288,
      288,  288,  288,  399,  134,  400,  401,  401,  401,  401,
      289,  289,  290,  289,  289,  289,  289,  289,  289,  291,
      292,  289,  289,  289,  289,  289,  289,  289,  293,  289,
      294,  289,  289,  289,  478,  478,  478,  478,  134,  384,

      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  271,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  118,  384,  382,  380,
      133,  133,  249,  295,  225,  118,  379,  118,  118,  118,
      118,  296,  296,  131,  118,  132,  133,  235,  378,  377,
      280,  118,  135,  298,  137,  123,  123,  123,  123,  391,
      134,  387,  288,  288,  288,  288,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  300,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      235,  140,  497,  497,  141,  497,  142,  142,  142,  142,

      142,  142,  142,  142,  142,  142,  142,  142,  142,  145,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  527,  527,  527,  527,  133,  134,  591,  376,
      591,  591,  280,  591,  134,  295,  225,  235,  133,  375,
      133,  374,  134,  296,  296,  298,  373,  298,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  591,  372,  591,  591,  141,  591,  591,  235,
      503,  591,  301,  479,  133,  265,  479,  479,  133,  298,
      164,  298,  363,  591,  304,  298,  591,  358,  419,  591,

      158,  210,  591,  133,  591,  419,  209,  591,  352,  133,
      298,  137,  129,  419,  133,  184,  298,  591,  133,  279,
      133,  298,  281,  125,  591,  462,  462,  591,  462,  275,
      282,  307,  591,  225,  133,  591,  283,  281,  262,  261,
      284,  298,  133,  113,  109,  184,  305,  419,  164,  298,
      463,  189,  281,  250,  251,  231,  250,  523,  231,  189,
      285,  307,  301,  158,  133,  133,  286,  281,  133,  250,
      287,  250,  308,  524,  524,  524,  524,  118,  306,  534,
      534,  534,  534,  133,  118,  225,  118,  137,  250,  133,
      250,  249,  591,  247,  133,  311,  158,  312,  253,  313,

      246,  107,  245,  107,  118,  252,  252,  252,  252,  107,
      243,  295,  225,  118,  133,  118,  118,  118,  118,  296,
      296,  242,  133,  235,  140,  235,  314,  125,  315,  118,
      241,  235,  316,  317,  235,  236,  118,  225,  118,  364,
      118,  118,  118,  118,  356,  133,  318,  318,  318,  318,
      391,  392,  387,  288,  288,  288,  288,  319,  319,  319,
      320,  319,  319,  319,  319,  319,  319,  319,  321,  320,
      319,  319,  319,  319,  322,  320,  319,  319,  323,  319,
      319,  524,  524,  524,  524,  235,  235,  318,  318,  318,
      324,  318,  318,  318,  318,  318,  318,  318,  325,  324,

      318,  318,  318,  318,  326,  324,  318,  318,  327,  318,
      318,  318,  318,  591,  591,  591,  591,  591,  591,  591,
      234,   76,  591,  133,  133,  133,  591,   94,  210,  133,
      298,  298,  298,  209,  591,  129,  298,  591,  591,  591,
      591,  591,  591,  591,  133,  128,  109,   76,  133,  133,
      133,  298,  591,  591,  512,  298,  298,  298,   87,  591,
      591,  591,   87,  591,  591,  591,  591,  591,   87,  591,
      591,  133,  591,  591,   87,  189,  591,  189,  298,  133,
      189,  591,  231,  301,  164,  231,  298,  329,  591,  591,
      298,  591,  133,  130,  164,  591,  130,  591,  591,  308,

      591,  591,  591,  133,  133,  133,  330,  133,  133,  133,
      543,  591,  331,  591,  298,  298,  184,  591,  591,  591,
      591,  158,  130,  591,  133,  130,  591,  133,  133,  133,
      133,  591,  164,  133,  298,  317,  164,  591,  591,  539,
      298,  591,  332,  591,  333,  591,  184,  591,  133,  591,
      591,  133,  591,  591,  591,  298,  591,  133,  130,  133,
      591,  130,  591,  301,  298,  591,  231,  591,  189,  231,
      332,  334,  133,  591,  591,  328,  133,  591,  419,  591,
      591,  591,  591,  308,  133,  419,  591,  133,  133,  133,
      591,  298,  158,  419,  335,  231,  298,  591,  231,  591,

      189,  336,  591,  591,  591,  133,  299,  133,  591,  338,
      224,  133,  308,  133,  591,  591,  337,  591,  548,  591,
      339,  591,  184,  591,  133,  340,  591,  419,  133,  591,
      591,  298,  591,  133,  591,  164,  591,  133,  591,  341,
      298,  231,  591,  591,  231,  130,  591,  591,  130,  591,
      591,  133,  184,  133,  591,  164,  133,  281,  308,  591,
      298,  225,  540,  591,  133,  282,  281,  591,  591,  133,
      591,  283,  281,  342,  591,  284,  189,  133,  591,  591,
      591,  591,  591,  591,  298,  133,  591,  281,  591,  591,
      133,  133,  591,  189,  343,  285,  281,  298,  591,  133,

      591,  286,  281,  342,  133,  287,  298,  164,  591,  591,
      591,  591,  591,  133,  591,  591,  591,  591,  133,  133,
      591,  549,  549,  549,  549,  298,  298,  133,  591,  317,
      591,  133,  591,  133,  298,  591,  591,  591,  591,  591,
      591,  591,  133,  591,  591,  591,  133,  130,  133,  298,
      130,  591,  591,  298,  344,  298,  591,  133,  591,  591,
      591,  591,  591,  402,  539,  591,  591,  591,  133,  133,
      133,  591,  591,  317,  591,  298,  298,  591,  591,  133,
      591,  133,  347,  345,  348,  591,  591,  133,  298,  158,
      552,  552,  552,  552,  298,  591,  158,  591,  133,  133,

      349,  591,  591,  591,  591,  591,  591,  133,  591,  350,
      351,  133,  133,  133,  591,  281,  591,  591,  298,  298,
      298,  591,  133,  282,  281,  591,  133,  591,  133,  283,
      281,  353,  591,  284,  591,  355,  591,  591,  591,  354,
      591,  164,  591,  591,  133,  281,  591,  591,  133,  133,
      133,  298,  358,  285,  281,  357,  591,  298,  591,  286,
      281,  133,  591,  287,  330,  591,  591,  133,  288,  288,
      288,  288,  133,  591,  591,  591,  591,  164,  591,  298,
      164,  266,  591,  301,  557,  557,  557,  557,  267,  268,
      298,  133,  133,  133,  118,  130,  591,  269,  130,  270,

      591,  295,  225,  118,  365,  118,  118,  118,  118,  296,
      296,  591,  539,  368,  591,  591,  184,  409,  410,  360,
      409,  370,  271,  591,  133,  591,  591,  591,  298,  591,
      133,  591,  231,  225,  435,  231,  281,  563,  563,  563,
      563,  367,  133,  365,  282,  281,  184,  591,  591,  308,
      283,  281,  133,  125,  284,  591,  361,  591,  362,  591,
      591,  445,  410,  301,  445,  369,  281,  391,  392,  387,
      288,  288,  288,  288,  285,  281,  591,  225,  446,  591,
      286,  281,  253,  591,  287,  107,  591,  107,  591,  383,
      383,  383,  383,  107,  566,  566,  566,  566,  119,  225,

      119,  370,  263,  263,  263,  263,  110,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  133,  387,  388,  395,  389,  390,  390,  390,
      390,  387,  387,  387,  387,  387,  387,  387,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  387,  387,  387,  387,  387,  387,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  387,  387,  387,  387,  387,  387,

      391,  392,  387,  288,  288,  288,  288,  391,  392,  387,
      288,  288,  288,  288,  391,  392,  387,  288,  288,  288,
      288,  391,  397,  387,  288,  288,  288,  288,  391,  392,
      387,  288,  288,  288,  288,  391,  591,  387,  288,  288,
      288,  288,  301,  591,  393,  118,  591,  409,  410,  328,
      409,  394,  119,  225,  119,  275,  274,  274,  274,  274,
      110,  118,  591,  225,  411,  591,  396,  591,  118,  225,
      118,  137,  591,  591,  591,  184,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  398,  591,  591,  591,
      133,  133,  124,  591,  481,  125,  591,  298,  298,  591,

      569,  569,  569,  569,  591,  184,  133,  591,  140,  591,
      158,  125,  591,  298,  133,  591,  591,  591,  404,  406,
      591,  298,  301,  591,  280,  591,  407,  392,  387,  288,
      288,  288,  288,  399,  406,  400,  403,  403,  403,  403,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  158,  164,  371,  371,  406,  371,
      133,  133,  414,  591,  171,  591,  591,  591,  591,  591,
      591,  295,  225,  591,  591,  301,  133,  591,  591,  296,
      296,  591,  298,  591,  133,  591,  591,  591,  133,  591,

      591,  591,  591,  301,  591,  298,  591,  133,  591,  591,
      298,  591,  231,  591,  298,  231,  301,  231,  184,  591,
      231,  591,  133,  298,  591,  591,  591,  301,  591,  308,
      580,  580,  580,  580,  308,  415,  184,  391,  591,  387,
      288,  288,  288,  288,  591,  591,  591,  591,  184,  184,
      591,  591,  591,  402,  133,  591,  403,  403,  403,  403,
      184,  298,  591,  591,  591,  301,  416,  158,  584,  584,
      584,  584,  317,  591,  591,  591,  424,  591,  133,  184,
      591,  591,  591,  301,  133,  591,  591,  133,  419,  591,
      184,  298,  133,  419,  480,  419,  301,  591,  591,  298,

      591,  591,  133,  419,  425,  591,  591,  301,  591,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  231,  133,  591,  231,  421,  426,  591,
      591,  591,  591,  301,  591,  591,  591,  591,  591,  133,
      308,  133,  591,  591,  591,  301,  298,  591,  298,  591,
      164,  591,  298,  591,  133,  591,  591,  231,  591,  591,
      231,  591,  133,  133,  591,  133,  184,  301,  591,  591,
      298,  591,  298,  591,  308,  591,  591,  231,  184,  591,
      231,  591,  591,  133,  591,  591,  591,  133,  409,  410,

      298,  409,  430,  591,  308,  591,  184,  591,  164,  298,
      184,  591,  591,  591,  591,  574,  591,  427,  416,  591,
      591,  301,  591,  301,  591,  164,  133,  591,  298,  133,
      591,  133,  591,  298,  591,  301,  591,  301,  591,  231,
      184,  164,  231,  591,  298,  591,  591,  591,  158,  133,
      591,  591,  591,  133,  184,  133,  308,  301,  231,  591,
      591,  231,  591,  591,  409,  410,  189,  409,  133,  133,
      184,  591,  591,  133,  591,  308,  298,  133,  591,  591,
      432,  543,  430,  591,  184,  431,  391,  591,  387,  288,
      288,  288,  288,  591,  591,  591,  591,  591,  591,  591,

      416,  301,  591,  133,  473,  591,  133,  107,  591,  107,
      298,  474,  474,  474,  474,  107,  434,  301,  587,  587,
      587,  587,  591,  591,  591,  591,  164,  591,  231,  133,
      591,  231,  133,  591,  591,  591,  330,  301,  133,  298,
      591,  591,  591,  460,  298,  308,  591,  482,  133,  133,
      436,  436,  591,  436,  436,  436,  436,  436,  436,  591,
      436,  436,  436,  436,  436,  436,  591,  438,  459,  436,
      184,  184,  591,  591,  436,  436,  436,  436,  436,  436,
      436,  281,  591,  133,  118,  591,  591,  164,  591,  282,
      281,  118,  225,  118,  137,  283,  281,  591,  591,  284,

      184,  184,  591,  591,  591,  436,  436,  436,  436,  436,
      436,  281,  133,  589,  589,  589,  589,  301,  133,  285,
      281,  591,  591,  591,  591,  286,  281,  591,  591,  287,
      591,  140,  591,  591,  125,  591,  591,  436,  436,  436,
      436,  436,  436,  439,  439,  387,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  436,  439,
      440,  441,  439,  442,  442,  442,  442,  439,  439,  439,
      439,  439,  439,  439,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  439,  439,

      439,  439,  439,  439,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      439,  439,  439,  439,  439,  439,  436,  443,  410,  436,
      443,  436,  436,  436,  436,  591,  436,  436,  436,  436,
      436,  436,  591,  438,  444,  436,  477,  477,  477,  477,
      436,  436,  436,  436,  436,  436,  436,  591,  391,  266,
      387,  288,  288,  288,  288,  591,  267,  268,  391,  591,
      387,  526,  526,  526,  526,  269,  591,  270,  591,  591,
      118,  436,  436,  436,  436,  436,  436,  118,  501,  118,

      591,  118,  118,  118,  118,  591,  253,  591,  591,  107,
      271,  107,  506,  474,  474,  474,  474,  107,  591,  591,
      591,  591,  591,  436,  436,  436,  436,  436,  436,  436,
      436,  591,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  447,  436,  436,  448,
      448,  448,  448,  436,  436,  436,  436,  436,  436,  436,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  436,  436,  436,  436,  436,  436,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,

      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  436,  436,  436,  436,
      436,  436,  436,  436,  591,  436,  436,  436,  436,  436,
      436,  437,  436,  436,  436,  436,  436,  436,  437,  438,
      437,  449,  450,  450,  450,  450,  436,  436,  436,  436,
      436,  436,  436,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  436,  451,  436,
      436,  452,  436,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,

      450,  450,  450,  450,  450,  450,  450,  450,  450,  436,
      436,  436,  436,  436,  436,  436,  436,  591,  436,  436,
      436,  436,  436,  436,  437,  453,  454,  436,  436,  436,
      436,  437,  438,  455,  449,  450,  450,  450,  450,  436,
      436,  436,  436,  436,  436,  436,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  457,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      436,  451,  436,  436,  452,  436,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  457,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,

      456,  456,  436,  436,  436,  436,  454,  436,  436,  436,
      591,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  458,  458,
      458,  458,  436,  436,  436,  436,  436,  436,  436,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  436,  436,  436,  436,  452,  436,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  436,  436,  436,  436,  436,

      436,  288,  288,  288,  288,  391,  591,  387,  288,  288,
      288,  288,  591,  391,  266,  387,  288,  288,  288,  288,
      591,  267,  268,  591,  591,  591,  591,  591,  591,  591,
      269,  591,  270,  591,  591,  591,  133,  591,  133,  118,
      591,  591,  591,  298,  591,  298,  118,  225,  118,  591,
      118,  118,  118,  118,  533,  271,  387,  288,  288,  288,
      288,  391,  483,  387,  288,  288,  288,  288,  591,  591,
      485,  134,  591,  591,  591,  591,  280,  591,  134,  591,
      591,  288,  288,  288,  288,  591,  134,  591,  495,  488,
      591,  507,  289,  289,  290,  289,  289,  289,  289,  289,

      289,  291,  292,  289,  289,  289,  289,  289,  289,  289,
      293,  289,  294,  289,  289,  289,  133,  591,  133,  485,
      134,  591,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  271,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  406,  591,
      591,  591,  591,  280,  591,  407,  591,  387,  288,  288,
      288,  288,  391,  406,  387,  551,  551,  551,  551,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  591,  591,  591,  591,  406,  387,  387,

      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  591,  387,  387,  591,  387,  417,  417,
      417,  417,  387,  387,  387,  387,  387,  387,  387,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  387,  387,  387,  387,  489,  387,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  387,  387,  387,  387,  387,
      387,  491,  591,  591,  591,  591,  490,  591,  491,  391,

      591,  387,  288,  288,  288,  288,  491,  591,  591,  591,
      591,  591,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  591,  591,  591,  591,
      493,  419,  591,  529,  591,  591,  490,  591,  419,  591,
      591,  591,  133,  591,  133,  591,  419,  591,  591,  298,
      591,  298,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  591,  591,  591,  591,
      421,  281,  591,  591,  591,  591,  133,  591,  591,  282,

      281,  591,  591,  298,  133,  283,  281,  591,  133,  284,
      494,  298,  591,  591,  460,  298,  591,  368,  591,  591,
      591,  281,  591,  591,  591,  591,  498,  591,  591,  285,
      281,  591,  133,  591,  133,  286,  281,  591,  591,  287,
      288,  288,  288,  288,  591,  391,  591,  387,  288,  288,
      288,  288,  591,  266,  591,  591,  591,  591,  118,  591,
      267,  268,  591,  496,  591,  118,  225,  118,  137,  269,
      591,  270,  591,  499,  591,  591,  133,  591,  591,  591,
      591,  504,  591,  591,  133,  591,  591,  591,  133,  131,
      118,  132,  133,  531,  271,  591,  280,  118,  135,  298,

      137,  123,  123,  123,  123,  140,  134,  591,  125,  591,
      510,  591,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  300,  299,  299,  299,  299,
      500,  299,  299,  299,  299,  299,  591,  140,  591,  591,
      141,  591,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  145,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  591,  591,
      591,  591,  133,  371,  371,  591,  371,  591,  133,  591,
      591,  118,  591,  591,  591,  298,  591,  591,  118,  225,
      118,  281,  118,  118,  118,  118,  591,  591,  591,  282,

      281,  591,  591,  591,  591,  283,  281,  591,  133,  284,
      591,  591,  591,  591,  591,  298,  591,  133,  502,  591,
      591,  281,  591,  591,  298,  591,  301,  591,  591,  285,
      281,  591,  591,  298,  591,  286,  281,  591,  133,  287,
      591,  591,  591,  591,  591,  298,  330,  591,  591,  591,
      391,  513,  387,  288,  288,  288,  288,  591,  133,  184,
      591,  130,  591,  591,  130,  591,  591,  158,  591,  591,
      133,  535,  591,  591,  591,  591,  158,  298,  539,  591,
      591,  591,  591,  541,  591,  591,  541,  591,  133,  184,
      591,  133,  541,  591,  530,  541,  591,  133,  298,  391,

      542,  387,  288,  288,  288,  288,  301,  591,  391,  539,
      387,  288,  288,  288,  288,  591,  591,  591,  133,  591,
      431,  237,  591,  591,  591,  591,  591,  238,  391,  545,
      387,  288,  288,  288,  288,  591,  591,  591,  591,  591,
      391,  240,  387,  565,  565,  565,  565,  591,  537,  591,
      133,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  491,  387,  387,  387,  387,  490,  387,  491,  591,
      387,  133,  591,  591,  591,  387,  491,  387,  387,  387,
      387,  387,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,

      490,  490,  490,  490,  490,  490,  387,  387,  387,  387,
      491,  387,  591,  591,  591,  591,  591,  130,  591,  591,
      130,  591,  133,  133,  591,  118,  591,  591,  591,  298,
      298,  591,  118,  225,  540,  137,  591,  591,  387,  387,
      387,  387,  387,  387,  591,  391,  591,  387,  288,  288,
      288,  288,  391,  591,  387,  288,  288,  288,  288,  591,
      591,  591,  391,  591,  387,  288,  288,  288,  288,  591,
      591,  591,  140,  591,  591,  125,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  368,  591,  133,  591,  591,
      591,  158,  553,  558,  298,  591,  554,  591,  591,  591,

      298,  591,  133,  133,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  485,
      387,  391,  591,  387,  591,  591,  184,  591,  387,  387,
      387,  387,  387,  387,  387,  391,  560,  387,  288,  288,
      288,  288,  591,  591,  391,  559,  387,  288,  288,  288,
      288,  591,  591,  591,  591,  591,  184,  591,  591,  387,
      387,  387,  387,  387,  387,  591,  391,  133,  387,  288,
      288,  288,  288,  558,  391,  568,  387,  288,  288,  288,
      288,  591,  591,  591,  591,  591,  591,  591,  485,  591,
      591,  387,  387,  387,  387,  387,  387,  133,  591,  591,

      591,  591,  591,  391,  298,  387,  288,  288,  288,  288,
      391,  576,  387,  288,  288,  288,  288,  591,  591,  591,
      591,  591,  591,  485,  281,  591,  591,  591,  558,  591,
      591,  591,  282,  281,  573,  298,  591,  591,  283,  281,
      412,  591,  284,  591,  591,  573,  573,  573,  591,  591,
      591,  591,  591,  591,  281,  591,  591,  591,  573,  591,
      570,  184,  285,  281,  591,  591,  591,  591,  286,  281,
      412,  573,  287,  591,  591,  591,  591,  133,  591,  591,
      591,  591,  573,  573,  573,  591,  591,  591,  591,  591,
      591,  184,  591,  591,  591,  573,  591,  591,  591,  591,

      591,  591,  591,  591,  591,  591,  591,  591,  558,  591,
      591,  591,  591,  591,  591,  591,  573,  591,  573,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  573,  591,  573,   75,  591,  591,  591,
      591,  591,  591,  591,   75,  591,  591,  591,   75,  591,
      591,   75,   75,  123,  591,  591,  591,  123,  123,  123,
      123,  123,  591,  591,  123,  123,  123,  123,  123,  127,
      591,  591,  591,  591,  591,  591,  591,  127,  591,  591,

      591,  591,  127,  591,  591,  127,  127,  142,  591,  591,
      591,  591,  142,  142,  142,  591,  142,  142,  142,  142,
      591,  591,  591,  142,  142,  142,  142,  142,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  591,  248,  248,  118,  591,
      591,  591,  118,  118,  591,  118,  591,  591,  591,  118,
      591,  591,  118,  118,  265,  591,  591,  591,  265,  591,
      591,  265,  265,  273,  591,  591,  591,  273,  591,  591,
      273,  273,  276,  591,  591,  591,  276,  591,  276,  276,
      276,  278,  278,  278,  278,  278,  278,  278,  278,  278,

      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  280,  591,  280,  280,  591,  591,  591,
      591,  280,  591,  280,  591,  280,  280,  297,  591,  591,
      591,  297,  297,  591,  297,  297,  297,  591,  297,  591,
      591,  297,  297,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      591,  381,  381,  417,  591,  591,  591,  417,  591,  417,
      417,  417,  436,  436,  591,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  437,  437,  591,  437,  437,  437,

      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  464,  464,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  464,  464,  265,  591,  591,  591,  265,  591,  591,
      265,  265,  487,  591,  591,  591,  487,  591,  591,  487,
      487,  273,  591,  273,  273,  591,  591,  591,  273,  591,
      591,  273,  273,  123,  591,  591,  591,  123,  123,  123,
      123,  591,  591,  591,  123,  123,  123,  123,  123,  297,
      591,  591,  591,  297,  297,  591,  297,  591,  591,  591,
      297,  591,  591,  297,  297,  417,  591,  591,  591,  417,

      591,  417,  417,  417,  490,  591,  490,  490,  591,  591,
      591,  591,  490,  591,  490,  591,  490,  118,  591,  591,
      591,  118,  118,  591,  118,  591,  591,  591,  118,  591,
      591,  118,  118,  276,  591,  591,  591,  276,  591,  276,
      276,  276,  516,  591,  591,  591,  591,  591,  591,  591,
      516,  591,  591,  591,  591,  516,  591,  591,  516,  516,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  520,  520,  591,  591,  520,  591,  591,  591,
      591,  591,  520,  591,  591,  520,  520,   75,  591,  591,

      591,  591,  591,  591,  591,   75,  591,  591,  591,   75,
      591,  591,   75,   75,  573,  591,  591,  591,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      591,  573,  573,  573,  573,  573,  579,  591,  591,  591,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  591,  579,  579,  579,  579,  579,    3,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,

      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591
    } ;

static yyconst short int yy_chk[5153] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    5,  451,  590,    5,   12,   14,  182,

       14,   59,   14,   14,   14,   14,   14,   17,   20,   17,
      103,   17,   17,   17,   17,   17,   18,   18,   18,   18,
       68,   12,   20,  213,   20,   20,   20,   20,   12,  182,
       82,   74,   12,   12,   74,   63,  451,   12,   63,   82,
       12,   12,   19,   19,   19,   82,   19,   19,   19,   19,
       19,   12,   63,   12,  226,   12,  226,   12,  588,   12,
       87,   30,   12,   12,   12,   12,   87,   12,   19,   30,
       59,   12,   13,   30,   19,   30,  586,  213,   30,   30,
       87,   59,  114,   13,   13,  326,  115,  583,   68,   60,
      103,  326,   60,  301,   13,   13,   13,  114,  114,   60,

       68,  115,  115,   13,   13,   32,   60,   22,  130,   13,
       13,  130,  302,   13,   22,   22,   22,   22,   22,   22,
       22,   22,   22,  301,   13,   13,   13,   77,   77,   77,
       77,  158,  582,   13,   13,   13,  581,   23,  158,   13,
       13,   13,  302,   13,   23,   23,   23,   23,   23,   23,
       23,   23,   23,  231,   22,  577,  231,   22,   32,   32,
      307,   85,  107,  107,  107,  107,   32,   85,   60,  574,
       32,  223,   32,   85,   92,   32,   32,   92,  572,   60,
       92,   85,   22,  223,   23,   32,  325,   23,   29,  568,
      307,   29,  222,  564,   92,   29,   29,   29,   29,  325,

      550,  437,   29,   29,   29,   29,   29,   29,   29,   29,
       29,  158,   29,  110,  110,  110,  110,  413,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   31,   29,  222,  437,   29,  413,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,  409,  409,   31,  409,   29,   34,
       34,  121,  121,  121,  121,  212,  541,   34,  212,  541,
      547,   34,   31,   34,  139,   31,   34,   34,   61,  327,

       31,   61,   33,   31,  563,  327,   31,   31,   61,   31,
       33,  546,   31,   31,   33,   61,   33,  563,   33,   33,
       33,   35,   31,  180,   35,   35,   37,  139,  545,  544,
      180,   36,   35,  540,  310,   35,   35,  310,   35,   36,
      578,   35,   35,   36,   40,   36,   37,  585,   36,   36,
       38,  310,  536,   38,   37,  212,   37,  139,   37,  152,
       37,   38,  152,   37,   37,   38,   39,   38,  460,   39,
       38,   38,  578,  532,  139,  314,  152,   39,  460,  585,
       39,   39,  314,   39,   45,   45,   39,   39,   61,   42,
       39,  180,   45,  175,   40,  525,   45,   40,   45,  519,

      175,   45,   45,  180,  518,   40,  152,  152,  517,   40,
       43,   40,  428,   40,   40,   40,  452,   41,  452,  428,
       41,   41,   42,   65,   40,   41,   65,  458,   41,  458,
      516,   41,   41,   65,   41,   41,  515,   41,   41,  314,
       65,  513,   42,   42,   46,  300,  175,  501,  232,  232,
       42,  232,   42,   42,   42,  314,   42,  501,  533,   42,
       42,  119,   43,   43,  119,  119,  119,  119,  533,   42,
       43,   43,  555,  175,  498,   43,   44,   43,  300,   44,
       43,   43,  555,   44,  489,   48,  484,   44,  479,  475,
       43,   44,  428,   44,   65,   44,   44,   44,   46,   46,

      471,   46,   46,   46,   47,  470,   46,  469,  300,   46,
       46,  560,   46,   65,   46,   46,   46,  468,  232,  560,
       47,   47,  224,  467,   47,  300,  224,  466,   47,  465,
      224,   48,   47,  448,   47,  448,  224,   47,   47,   48,
      463,   49,  224,   48,   49,   48,  194,  461,   48,   48,
      371,  371,   49,  371,  410,  410,   49,  410,   49,  447,
       49,   49,   49,   50,  576,  194,   50,   50,  441,  194,
      439,   50,  576,  194,   50,  371,  436,  448,   50,  194,
       50,  418,  397,   50,   50,  194,  386,   50,   56,   56,
      385,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   57,  384,  382,   57,  275,  275,  275,  275,   57,
       57,   57,  389,  389,  389,  389,   57,   57,   57,   57,

       57,   57,   57,   57,  380,   62,  429,  429,   62,  429,
       66,   67,  379,   66,   67,   62,  390,  390,  390,  390,
       66,   67,   62,   64,   57,  378,   64,   66,   67,  233,
      233,  233,  233,   64,  233,  377,   57,  376,  108,   57,
       64,  108,  375,  108,  374,  108,  108,  108,  108,  108,
      369,  111,  352,  111,   57,  111,  111,  111,  111,  111,
      297,  297,  346,  297,  324,  548,   64,  399,  399,  399,
      399,   57,   58,  548,  548,   58,  297,  297,  323,  331,
       58,   58,   58,  167,   62,   67,  331,   58,   58,   58,
       58,   58,   58,   58,   58,   62,   64,   64,  322,  321,

       66,   67,  112,  318,  112,  167,  112,  112,  112,  112,
      112,  502,  331,   64,  502,   58,  167,  345,  120,  120,
      120,  120,  443,  443,  345,  443,  123,   58,  502,  309,
       58,  120,  295,  123,  123,  123,  123,  294,  120,  120,
      293,  123,  331,  122,  292,   58,  167,  120,  291,  120,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  331,
      126,  290,   58,  167,  132,  287,  286,  126,  126,  126,
      126,  132,  120,  123,  126,  126,  123,  134,  285,  132,
      298,  298,  443,  284,  134,  345,  133,  283,  298,  298,
      122,  282,  134,  122,  133,  133,  278,  345,  214,  276,

      133,  133,  214,  449,  133,  449,  214,  126,  214,  273,
      126,  262,  214,  132,  261,  132,  133,  610,  214,  132,
      610,  610,  260,  132,  133,  133,  134,  259,  134,  132,
      133,  133,  134,  258,  133,  132,  134,  328,  328,  257,
      142,  164,  134,  142,  164,  328,  328,  449,  134,  135,
      142,  164,  445,  445,  135,  445,  135,  142,  164,  135,
      135,  135,  135,  272,  135,  272,  272,  272,  272,  272,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  400,  400,  400,  400,  135,  256,

      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  136,  255,  251,  247,
      142,  164,  246,  136,  136,  136,  245,  136,  136,  136,
      136,  136,  136,  138,  138,  138,  138,  244,  243,  242,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  288,
      138,  288,  288,  288,  288,  288,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      241,  138,  497,  497,  138,  497,  138,  138,  138,  138,

      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  478,  478,  478,  478,  138,  141,  143,  240,
      144,  143,  141,  144,  141,  455,  455,  239,  143,  238,
      144,  237,  141,  455,  455,  143,  236,  144,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  145,  235,  146,  145,  141,  146,  147,  234,
      455,  147,  145,  623,  146,  225,  623,  623,  147,  145,
      144,  146,  218,  148,  144,  147,  148,  211,  419,  149,

      143,  210,  149,  148,  150,  419,  209,  150,  200,  149,
      148,  140,  129,  419,  150,  145,  149,  128,  143,  127,
      144,  150,  151,  125,  153,  462,  462,  153,  462,  124,
      151,  151,  154,  118,  153,  154,  151,  151,  117,  116,
      151,  153,  154,  113,  109,  145,  147,  419,  147,  154,
      462,  146,  151,  106,  105,  155,  104,  473,  155,  148,
      151,  151,  145,  149,  146,  155,  151,  151,  147,  102,
      151,  101,  155,  473,  473,  473,  473,  219,  150,  486,
      486,  486,  486,  148,  219,  219,  219,  219,  100,  149,
       99,   98,  219,   96,  150,  153,  154,  153,  252,  153,

       95,  252,   93,  252,  204,  252,  252,  252,  252,  252,
       91,  204,  204,  204,  153,  204,  204,  204,  204,  204,
      204,   90,  154,   89,  219,   88,  155,  219,  155,  411,
       86,   84,  155,  155,   83,   81,  411,  411,  411,  219,
      411,  411,  411,  411,  204,  155,  156,  156,  156,  156,
      265,  265,  265,  265,  265,  265,  265,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  523,  523,  523,  523,   80,   79,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,

      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  157,  159,  160,  157,  159,  160,  161,
       78,   76,  161,  157,  159,  160,   72,   55,   54,  161,
      157,  159,  160,   52,  162,   28,  161,  162,  163,  165,
      166,  163,  165,  166,  162,   25,   16,    9,  163,  165,
      166,  162,    3,    0,  453,  163,  165,  166,  453,    0,
        0,  168,  453,    0,  168,    0,    0,    0,  453,  170,
        0,  168,  170,  169,  453,  157,  169,  160,  168,  170,
      161,    0,  171,  169,  157,  171,  170,  159,    0,    0,
      169,    0,  171,  505,  162,    0,  505,  172,  173,  171,

      172,  173,    0,  157,  159,  160,  163,  172,  173,  161,
      505,    0,  165,    0,  172,  173,  169,  174,    0,    0,
      174,  166,  508,  176,  162,  508,  176,  174,  163,  165,
      166,    0,  168,  176,  174,  169,  169,    0,  177,  508,
      176,  177,  170,    0,  170,    0,  169,  178,  177,    0,
      178,  168,    0,    0,    0,  177,    0,  178,  500,  170,
        0,  500,    0,  169,  178,    0,  179,    0,  172,  179,
      172,  173,  171,    0,  183,  500,  179,  183,  491,  184,
        0,    0,  184,  179,  183,  491,    0,  172,  173,  184,
        0,  183,  176,  491,  174,  185,  184,    0,  185,    0,

      176,  176,    0,    0,    0,  185,  500,  174,    0,  178,
      520,  520,  185,  176,  186,    0,  177,  186,  520,    0,
      178,    0,  184,  187,  186,  178,  187,  491,  177,    0,
        0,  186,    0,  187,    0,  183,    0,  178,    0,  179,
      187,  189,    0,  188,  189,  503,  188,    0,  503,    0,
        0,  189,  184,  188,    0,  183,  179,  181,  189,    0,
      188,  503,  503,    0,  183,  181,  181,  190,    0,  184,
      190,  181,  181,  181,    0,  181,  185,  190,    0,    0,
      191,    0,    0,  191,  190,  185,    0,  181,    0,  192,
      191,  520,  192,  186,  187,  181,  181,  191,    0,  192,

        0,  181,  181,  181,  186,  181,  192,  188,  193,  195,
        0,  193,  195,  187,    0,    0,    0,  196,  193,  195,
      196,  524,  524,  524,  524,  193,  195,  196,    0,  190,
        0,  189,  197,  188,  196,  197,  198,    0,  199,  198,
        0,  199,  197,    0,    0,    0,  198,  509,  199,  197,
      509,    0,    0,  198,  191,  199,    0,  190,  201,  202,
        0,  201,  202,  509,  509,  509,    0,    0,  201,  202,
      191,  203,    0,  192,  203,  201,  202,  205,    0,  192,
      205,  203,  195,  193,  195,    0,    0,  205,  203,  193,
      527,  527,  527,  527,  205,    0,  196,    0,  193,  195,

      197,  206,  207,  208,  206,  207,  208,  196,    0,  198,
      199,  206,  207,  208,    0,  215,    0,    0,  206,  207,
      208,    0,  197,  215,  215,    0,  198,    0,  199,  215,
      215,  201,    0,  215,  220,  203,    0,  220,    0,  202,
      228,  201,    0,  228,  220,  215,    0,    0,  201,  202,
      228,  220,  215,  215,  215,  205,    0,  228,    0,  215,
      215,  203,  227,  215,  206,  227,    0,  205,  216,  216,
      216,  216,  227,  221,    0,    0,  221,  208,    0,  227,
      207,  216,    0,  221,  534,  534,  534,  534,  216,  216,
      221,  206,  207,  208,  217,  511,    0,  216,  511,  216,

        0,  217,  217,  217,  220,  217,  217,  217,  217,  217,
      217,  230,  511,  228,  230,    0,  221,  356,  356,  216,
      356,  230,  216,    0,  220,    0,    0,    0,  230,    0,
      228,    0,  317,  356,  356,  317,  229,  549,  549,  549,
      549,  227,  317,  221,  229,  229,  221,    0,    0,  317,
      229,  229,  227,  511,  229,    0,  217,    0,  217,    0,
        0,  362,  362,  221,  362,  229,  229,  268,  268,  268,
      268,  268,  268,  268,  229,  229,    0,  362,  362,    0,
      229,  229,  254,    0,  229,  254,    0,  254,    0,  254,
      254,  254,  254,  254,  552,  552,  552,  552,  263,  263,

      263,  230,  263,  263,  263,  263,  263,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  317,  264,  264,  268,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,

      266,  266,  266,  266,  266,  266,  266,  267,  267,  267,
      267,  267,  267,  267,  269,  269,  269,  269,  269,  269,
      269,  270,  270,  270,  270,  270,  270,  270,  271,  271,
      271,  271,  271,  271,  271,  394,    0,  394,  394,  394,
      394,  394,  347,    0,  266,  274,    0,  507,  507,  347,
      507,  267,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  277,    0,  507,  507,    0,  269,    0,  277,  277,
      277,  277,    0,    0,    0,  347,  277,    0,    0,    0,
      305,  304,    0,  305,  304,    0,  271,    0,    0,    0,
      305,  304,  274,    0,  394,  274,  306,  305,  304,  306,

      557,  557,  557,  557,  311,  347,  306,  311,  277,    0,
      347,  277,    0,  306,  311,    0,    0,    0,  277,  289,
        0,  311,  347,    0,  289,    0,  289,  289,  289,  289,
      289,  289,  289,  401,  289,  401,  401,  401,  401,  401,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  304,  305,  308,  308,  289,  308,
      305,  304,  311,    0,  306,  312,    0,    0,  312,    0,
        0,  308,  308,    0,    0,  312,  306,    0,  313,  308,
      308,  313,  312,  315,  311,    0,  315,  316,  313,    0,

      316,    0,    0,  315,    0,  313,  329,  316,    0,  329,
      315,    0,  330,    0,  316,  330,  329,  332,  312,    0,
      332,    0,  330,  329,    0,    0,    0,  332,    0,  330,
      575,  575,  575,  575,  332,  312,  315,  393,    0,  393,
      393,  393,  393,  393,  333,    0,    0,  333,  312,  329,
        0,    0,    0,  403,  333,  403,  403,  403,  403,  403,
      332,  333,    0,    0,    0,  312,  315,  313,  580,  580,
      580,  580,  316,    0,  335,    0,  329,  335,  313,  329,
        0,    0,  336,  315,  335,  336,    0,  316,  319,    0,
      332,  335,  336,  319,  393,  319,  329,    0,    0,  336,

        0,    0,  330,  319,  333,    0,    0,  332,    0,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  334,  333,    0,  334,  319,  335,  337,
        0,  338,  337,  334,  338,  339,    0,    0,  339,  337,
      334,  338,    0,    0,    0,  339,  337,    0,  338,    0,
      336,    0,  339,  340,  335,  343,  340,  341,  343,    0,
      341,    0,  336,  340,    0,  343,  334,  341,    0,    0,
      340,    0,  343,  344,  341,    0,  344,  348,  339,    0,
      348,    0,  349,  344,    0,  349,    0,  348,  562,  562,

      344,  562,  349,    0,  348,    0,  334,    0,  338,  349,
      341,  350,    0,    0,  350,  562,  351,  337,  339,  351,
        0,  350,    0,  334,    0,  343,  351,  353,  350,  337,
      353,  338,    0,  351,    0,  339,    0,  353,    0,  354,
      341,  340,  354,    0,  353,    0,    0,    0,  344,  354,
        0,    0,    0,  340,  350,  343,  354,  341,  355,  357,
        0,  355,  357,    0,  571,  571,  348,  571,  355,  357,
      353,    0,    0,  344,    0,  355,  357,  348,    0,    0,
      351,  571,  349,    0,  350,  350,  395,    0,  395,  395,
      395,  395,  395,  367,    0,    0,  367,    0,    0,    0,

      353,  350,    0,  367,  383,    0,  351,  383,    0,  383,
      367,  383,  383,  383,  383,  383,  354,  353,  584,  584,
      584,  584,  414,    0,    0,  414,  357,  368,  416,  354,
      368,  416,  414,    0,    0,    0,  355,  368,  416,  414,
        0,    0,    0,  368,  368,  416,    0,  395,  355,  357,
      359,  359,    0,  359,  359,  359,  359,  359,  359,    0,
      359,  359,  359,  359,  359,  359,    0,  359,  367,  359,
      368,  416,    0,    0,  359,  359,  359,  359,  359,  359,
      359,  370,    0,  367,  404,    0,    0,  414,    0,  370,
      370,  404,  404,  404,  404,  370,  370,    0,    0,  370,

      368,  416,    0,    0,    0,  359,  359,  359,  359,  359,
      359,  370,  414,  587,  587,  587,  587,  368,  416,  370,
      370,    0,    0,    0,    0,  370,  370,    0,    0,  370,
        0,  404,    0,    0,  404,    0,    0,  359,  359,  359,
      359,  359,  359,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,

      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  361,  361,  361,  361,
      361,  361,  361,  361,  361,    0,  361,  361,  361,  361,
      361,  361,    0,  361,  361,  361,  388,  388,  388,  388,
      361,  361,  361,  361,  361,  361,  361,    0,  442,  388,
      442,  442,  442,  442,  442,    0,  388,  388,  477,    0,
      477,  477,  477,  477,  477,  388,    0,  388,    0,    0,
      435,  361,  361,  361,  361,  361,  361,  435,  435,  435,

        0,  435,  435,  435,  435,    0,  474,    0,    0,  474,
      388,  474,  442,  474,  474,  474,  474,  474,    0,    0,
        0,    0,    0,  361,  361,  361,  361,  361,  361,  363,
      363,    0,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,

      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  364,  364,    0,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,

      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  365,  365,    0,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,

      365,  365,  365,  365,  365,  365,  365,  365,  366,  366,
        0,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,

      366,  391,  391,  391,  391,  396,    0,  396,  396,  396,
      396,  396,    0,  398,  391,  398,  398,  398,  398,  398,
        0,  391,  391,    0,    0,    0,  415,    0,  426,  415,
      391,  426,  391,    0,    0,    0,  415,    0,  426,  444,
        0,    0,    0,  415,    0,  426,  444,  444,  444,    0,
      444,  444,  444,  444,  485,  391,  485,  485,  485,  485,
      485,  483,  396,  483,  483,  483,  483,  483,    0,    0,
      398,  407,    0,    0,    0,    0,  407,    0,  407,    0,
        0,  407,  407,  407,  407,    0,  407,    0,  426,  415,
        0,  444,  407,  407,  407,  407,  407,  407,  407,  407,

      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  415,    0,  426,  483,
      407,    0,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  408,    0,
        0,    0,    0,  408,    0,  408,    0,  408,  408,  408,
      408,  408,  526,  408,  526,  526,  526,  526,  526,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,    0,    0,    0,    0,  408,  417,  417,

      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,    0,  417,  417,    0,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  420,    0,    0,    0,    0,  420,    0,  420,  480,

        0,  480,  480,  480,  480,  480,  420,    0,    0,    0,
        0,    0,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,    0,    0,    0,    0,
      420,  421,  424,  480,  425,  424,  421,  425,  421,    0,
        0,    0,  424,    0,  425,    0,  421,    0,    0,  424,
        0,  425,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  427,    0,    0,  427,
      421,  430,    0,    0,  432,    0,  427,  432,  431,  430,

      430,  431,    0,  427,  432,  430,  430,    0,  431,  430,
      424,  432,    0,    0,  431,  431,    0,  425,    0,    0,
        0,  430,    0,    0,    0,    0,  430,    0,    0,  430,
      430,    0,  424,    0,  425,  430,  430,    0,    0,  430,
      438,  438,  438,  438,    0,  482,    0,  482,  482,  482,
      482,  482,    0,  438,    0,    0,    0,    0,  450,    0,
      438,  438,    0,  427,    0,  450,  450,  450,  450,  438,
        0,  438,    0,  432,    0,    0,  427,    0,    0,    0,
        0,  438,    0,    0,  432,    0,    0,    0,  431,  433,
      433,  433,  433,  482,  438,    0,  433,  433,  433,  433,

      433,  433,  433,  433,  433,  450,  433,    0,  450,    0,
      450,    0,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,    0,  433,    0,    0,
      433,    0,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  434,    0,
        0,  434,  433,  446,  446,    0,  446,    0,  434,    0,
        0,  446,    0,    0,    0,  434,    0,    0,  446,  446,
      446,  454,  446,  446,  446,  446,    0,    0,  494,  454,

      454,  494,    0,    0,    0,  454,  454,  456,  494,  454,
      456,    0,    0,    0,    0,  494,  457,  456,  454,  457,
        0,  454,    0,    0,  456,    0,  457,    0,  459,  454,
      454,  459,    0,  457,    0,  454,  454,    0,  459,  454,
        0,    0,    0,    0,    0,  459,  434,    0,    0,    0,
      481,  459,  481,  481,  481,  481,  481,    0,  434,  457,
      488,  512,    0,  488,  512,    0,    0,  456,    0,    0,
      488,  494,    0,    0,    0,    0,  457,  488,  512,    0,
        0,  499,    0,  504,  499,    0,  504,    0,  494,  457,
        0,  499,  506,    0,  481,  506,    0,  456,  499,  504,

      504,  504,  504,  504,  504,  504,  457,    0,  506,  506,
      506,  506,  506,  506,  506,    0,    0,    0,  459,    0,
      488,  512,    0,    0,    0,    0,    0,  512,  514,  514,
      514,  514,  514,  514,  514,    0,    0,    0,    0,    0,
      551,  512,  551,  551,  551,  551,  551,    0,  499,    0,
      488,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,    0,
      490,  499,    0,    0,    0,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,

      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  495,  496,    0,  495,  496,  510,    0,    0,
      510,    0,  495,  496,    0,  510,    0,    0,    0,  495,
      496,    0,  510,  510,  510,  510,    0,    0,  490,  490,
      490,  490,  490,  490,    0,  529,    0,  529,  529,  529,
      529,  529,  531,    0,  531,  531,  531,  531,  531,    0,
        0,    0,  530,    0,  530,  530,  530,  530,  530,    0,
        0,    0,  510,    0,    0,  510,    0,  537,    0,    0,
      537,    0,    0,  535,    0,  495,  535,  537,    0,    0,
        0,  496,  529,  535,  537,    0,  531,    0,    0,    0,

      535,    0,  495,  496,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  530,
      528,  528,    0,  528,    0,    0,  535,    0,  528,  528,
      528,  528,  528,  528,  528,  538,  538,  538,  538,  538,
      538,  538,    0,    0,  553,  537,  553,  553,  553,  553,
      553,    0,    0,    0,    0,    0,  535,    0,    0,  528,
      528,  528,  528,  528,  528,    0,  554,  537,  554,  554,
      554,  554,  554,  535,  556,  556,  556,  556,  556,  556,
      556,    0,    0,    0,    0,    0,    0,  559,  553,    0,
      559,  528,  528,  528,  528,  528,  528,  559,    0,    0,

        0,    0,    0,  565,  559,  565,  565,  565,  565,  565,
      567,  567,  567,  567,  567,  567,  567,    0,  570,    0,
        0,  570,    0,  554,  558,    0,    0,    0,  570,    0,
        0,    0,  558,  558,  573,  570,    0,    0,  558,  558,
      558,    0,  558,    0,    0,  573,  573,  573,    0,    0,
        0,    0,    0,    0,  558,    0,    0,    0,  573,    0,
      559,  570,  558,  558,    0,    0,    0,    0,  558,  558,
      558,  579,  558,    0,    0,    0,    0,  559,    0,    0,
        0,    0,  579,  579,  579,    0,    0,    0,    0,    0,
        0,  570,    0,    0,    0,  579,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  570,    0,
        0,    0,    0,    0,    0,    0,  573,    0,  573,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  579,    0,  579,  592,    0,    0,    0,
        0,    0,    0,    0,  592,    0,    0,    0,  592,    0,
        0,  592,  592,  593,    0,    0,    0,  593,  593,  593,
      593,  593,    0,    0,  593,  593,  593,  593,  593,  594,
        0,    0,    0,    0,    0,    0,    0,  594,    0,    0,

        0,    0,  594,    0,    0,  594,  594,  595,    0,    0,
        0,    0,  595,  595,  595,    0,  595,  595,  595,  595,
        0,    0,    0,  595,  595,  595,  595,  595,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,    0,  596,  596,  597,    0,
        0,    0,  597,  597,    0,  597,    0,    0,    0,  597,
        0,    0,  597,  597,  598,    0,    0,    0,  598,    0,
        0,  598,  598,  599,    0,    0,    0,  599,    0,    0,
      599,  599,  600,    0,    0,    0,  600,    0,  600,  600,
      600,  601,  601,  601,  601,  601,  601,  601,  601,  601,

      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  602,    0,  602,  602,    0,    0,    0,
        0,  602,    0,  602,    0,  602,  602,  603,    0,    0,
        0,  603,  603,    0,  603,  603,  603,    0,  603,    0,
        0,  603,  603,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
        0,  604,  604,  605,    0,    0,    0,  605,    0,  605,
      605,  605,  606,  606,    0,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  607,  607,    0,  607,  607,  607,

      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  608,  608,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  608,  608,  609,    0,    0,    0,  609,    0,    0,
      609,  609,  611,    0,    0,    0,  611,    0,    0,  611,
      611,  612,    0,  612,  612,    0,    0,    0,  612,    0,
        0,  612,  612,  613,    0,    0,    0,  613,  613,  613,
      613,    0,    0,    0,  613,  613,  613,  613,  613,  614,
        0,    0,    0,  614,  614,    0,  614,    0,    0,    0,
      614,    0,    0,  614,  614,  615,    0,    0,    0,  615,

        0,  615,  615,  615,  616,    0,  616,  616,    0,    0,
        0,    0,  616,    0,  616,    0,  616,  617,    0,    0,
        0,  617,  617,    0,  617,    0,    0,    0,  617,    0,
        0,  617,  617,  618,    0,    0,    0,  618,    0,  618,
      618,  618,  619,    0,    0,    0,    0,    0,    0,    0,
      619,    0,    0,    0,    0,  619,    0,    0,  619,  619,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  621,  621,    0,    0,  621,    0,    0,    0,
        0,    0,  621,    0,    0,  621,  621,  622,    0,    0,

        0,    0,    0,    0,    0,  622,    0,    0,    0,  622,
        0,    0,  622,  622,  624,    0,    0,    0,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
        0,  624,  624,  624,  624,  624,  625,    0,    0,    0,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,    0,  625,  625,  625,  625,  625,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,

      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
yy_lp = yy_full_lp; /* restore orig. accepting pos. */ \
yy_state_ptr = yy_full_state; /* restore orig. state */ \
yy_current_state = *yy_state_ptr; /* restore curr. state */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "PtbTokenizer.lex"
#define INITIAL 0
#line 2 "PtbTokenizer.lex"

#include "Tokenizer.h"
#include <string>

using namespace std;

static char const* opendblquote = "``";
static char const* closedblquote = "''";
static char const* openparen = "-LRB-";
static char const* closeparen = "-RRB-";
static char const* openbrace = "-LCB-";
static char const* closebrace = "-RCB-";
static char const* ptbmdash = "--";

/** This quotes a character with a backslash, but doesn't do it
 *  if the character is already preceded by a backslash
 */
static char* escape(char const* s, char c) {
  std::string r;
  char const* o;
  while (o = strchr(s, c)) {
    if (o == s || o[-1] != '\\') {
      r.append(s, o - s); r += "\\"; r += c;
    } 
    s = o + 1;
  }
  r += s;
  return strdup(r.c_str());
}

/* Definitions */
/* not used DOLLAR	{DOLSIGN}[ \t]*{NUMBER}  */
/* |\( ?{NUMBER} ?\))	 # is for pound signs */
/* The $ was for things like New$ */
/* WAS: only keep hyphens with short one side like co-ed */
/* But treebank just allows hyphenated things as words! */
/* For things that will have n't on the end */
/* Tokens you want but already okay: C'mon 'n' '[2-9]0s '[eE]m 'till?
   [Yy]'all 'Cause Shi'ite B'Gosh o'clock.  Here now only need apostrophe
   final words. 'n' is a token from dunno where. */
/* Abbreviations - induced from 1987 WSJ by hand */
/* Jun and Jul barely occur, but don't seem dangerous */
/* Sat. and Sun. barely occur and can easily lead to errors, so we omit them */
/* What about capitalization?  CORP. etc. */
/* ABBREV1 abbreviations are normally followed by lower case words.  If
   they're followed by an uppercase one, we assume there is also a
   sentence boundary */
/* ABRREV2 abbreviations are normally followed by an upper case word.  We
   assume they aren't used sentence finally */
/* ACRO Is a bad case -- can go either way! */
/* Cie. is used before French companies */
/* in the WSJ Alex. is generally an abbreviation for Alex. Brown, brokers! */
/* In tables: Mkt. for market Div. for division of company, Chg., Yr.: year */
#line 1840 "PtbTokenizer.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 116 "PtbTokenizer.lex"

	/* Rules Section */

#line 1971 "PtbTokenizer.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 592 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5059 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yy_full_match = yy_cp;
					yy_full_state = yy_state_ptr;
					yy_full_lp = yy_lp;
					break;
					}
				++yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 119 "PtbTokenizer.lex"
{ return Token(strdup(yytext), Tag); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 120 "PtbTokenizer.lex"
{ return Token(strdup(ptbmdash), Punct); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 121 "PtbTokenizer.lex"
{ return Token(strdup(yytext), Punct); }
	YY_BREAK
case 4:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 122 "PtbTokenizer.lex"
{ return Token(strdup(yytext), Word); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 123 "PtbTokenizer.lex"
{ return Token(strdup(yytext), Word); }
	YY_BREAK
case 6:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 124 "PtbTokenizer.lex"
{ unput(yytext[yyleng-1]), Token(strdup(yytext), Word); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 125 "PtbTokenizer.lex"
{ return Token(strdup(yytext), Word); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 126 "PtbTokenizer.lex"
{ return Token(strdup(yytext), Word); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 127 "PtbTokenizer.lex"
{ return Token(strdup(yytext), Url); }
	YY_BREAK
case 10:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 128 "PtbTokenizer.lex"
{ return Token(strdup(yytext), Word); }
	YY_BREAK
case 11:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 129 "PtbTokenizer.lex"
{ return Token(strdup(yytext), Word); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 130 "PtbTokenizer.lex"
{ return Token(strdup(yytext), Word); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 131 "PtbTokenizer.lex"
{ return Token(strdup(yytext), Date); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 132 "PtbTokenizer.lex"
{ return Token(strdup(yytext), Number); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 133 "PtbTokenizer.lex"
{ return Token(escape(yytext, '/'), Word); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 134 "PtbTokenizer.lex"
{ return Token(escape(yytext, '/'), Word); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 135 "PtbTokenizer.lex"
{ return Token(strdup(yytext), Word); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 136 "PtbTokenizer.lex"
{ char* abbr = yytext; 
			  unput(yytext[yyleng-1]);
	                  return Token(strdup(abbr), Abbrev); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 139 "PtbTokenizer.lex"
{ return Token(strdup(yytext), Abbrev); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 140 "PtbTokenizer.lex"
{ return Token(strdup(yytext), Abbrev); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 141 "PtbTokenizer.lex"
{ return Token(strdup(yytext), Abbrev); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 142 "PtbTokenizer.lex"
{ return Token(strdup(yytext), Abbrev); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 143 "PtbTokenizer.lex"
{ return Token(strdup(yytext), Abbrev); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 144 "PtbTokenizer.lex"
{ return Token(strdup(yytext), Word); }
	YY_BREAK
case 25:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 145 "PtbTokenizer.lex"
{ return Token(strdup(yytext), Word); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 146 "PtbTokenizer.lex"
{ return Token(strdup(yytext), Phone); }
	YY_BREAK
case 27:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 147 "PtbTokenizer.lex"
{ return Token(strdup(opendblquote), Punct); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 148 "PtbTokenizer.lex"
{ return Token(strdup(closedblquote), Punct); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 149 "PtbTokenizer.lex"
{ return Token(strdup(yytext), Punct); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 150 "PtbTokenizer.lex"
{ return Token(strdup(yytext), Punct); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 151 "PtbTokenizer.lex"
{ return Token(strdup(yytext), Punct); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 152 "PtbTokenizer.lex"
{ return Token(strdup(yytext), Punct); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 153 "PtbTokenizer.lex"
{ /* ignore */ }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 154 "PtbTokenizer.lex"
{ return Token(strdup(yytext), Punct); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 155 "PtbTokenizer.lex"
{ return Token(strdup(yytext), Punct); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 156 "PtbTokenizer.lex"
{ return Token(strdup(openbrace), Punct); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 157 "PtbTokenizer.lex"
{ return Token(strdup(closebrace), Punct); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 158 "PtbTokenizer.lex"
{ return Token(strdup(openparen), Punct); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 159 "PtbTokenizer.lex"
{ return Token(strdup(closeparen), Punct); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 160 "PtbTokenizer.lex"
{ if (yyleng >= 3 && yyleng <= 4) 
    		    return Token(strdup(ptbmdash), Punct);
                  else
		    return Token(strdup(yytext), Punct);
		}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 165 "PtbTokenizer.lex"
{ return Token(strdup(yytext), Punct); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 166 "PtbTokenizer.lex"
{ return Token(strdup(yytext), Punct); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 167 "PtbTokenizer.lex"
{ return Token(escape(yytext, '*'), Punct); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 168 "PtbTokenizer.lex"
{ return Token(strdup(yytext), Punct); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 169 "PtbTokenizer.lex"
{ return Token(strdup(yytext), Punct); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 170 "PtbTokenizer.lex"
{ return Token(strdup(yytext), Punct); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 171 "PtbTokenizer.lex"
{ return Token(strdup(yytext), Punct); }
	YY_BREAK
case 48:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 172 "PtbTokenizer.lex"
{  return Token(strdup(yytext), Word); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 173 "PtbTokenizer.lex"
{ return Token(strdup(yytext), Word); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 174 "PtbTokenizer.lex"
{ /* ignore */ }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 175 "PtbTokenizer.lex"
{ /* ignore */ }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 176 "PtbTokenizer.lex"
{ std::cerr << yytext; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 177 "PtbTokenizer.lex"
{ return Token(strdup(""), Eof); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 178 "PtbTokenizer.lex"
ECHO;
	YY_BREAK
#line 2371 "PtbTokenizer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 93);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 592 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 93;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 592 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 591);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 178 "PtbTokenizer.lex"
