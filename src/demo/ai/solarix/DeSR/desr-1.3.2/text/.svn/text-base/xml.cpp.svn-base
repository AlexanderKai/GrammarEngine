#define yyFlexLexer xmlFlexLexer

#line 4 "xml.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <fstream>
using std::istream;
using std::ostream;
#ifndef _WIN32
#include <unistd.h>
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif


/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include "FlexLexer.h"


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 22
#define YY_END_OF_BUFFER 23
static yyconst short int yy_accept[682] =
    {   0,
        0,    0,    0,    0,    0,    0,   23,   15,   15,   13,
       22,    6,   22,   22,    3,   22,    2,   21,   22,   22,
       22,   17,   20,   16,   15,   15,   14,    0,    0,    0,
        0,    4,    0,    0,    0,    5,    2,    0,    0,   18,
        0,    0,    0,   19,   16,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    4,    4,    2,   18,   18,   16,
        0,    0,    0,    0,    0,    0,    0,   12,    7,    0,
        2,   16,    0,    8,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    1,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   11,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   10,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   10,    0,    0,    0,    9,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    9,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   10,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    9,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       10,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   10,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    1,    1,    7,    8,
        9,    1,    1,    1,   10,   11,   12,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   13,    1,   14,
       15,   16,   17,    1,   18,   19,   20,   21,   22,   23,
       24,   24,   25,   24,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   24,   24,   37,   38,   24,
       39,   40,   41,    1,   24,    1,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   42,   43,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   44,
       24,   24,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[45] =
    {   0,
        1,    2,    3,    1,    1,    1,    1,    1,    1,    1,
        4,    1,    5,    6,    1,    7,    1,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    1,    1,
        1,    8,    8,    8
    } ;

static yyconst short int yy_base[720] =
    {   0,
        0,    2,   16,    0,   60,    0, 1352,    0,  103,  103,
     3420, 3420,  103,  102, 3420, 1326, 1274, 3420,  105,  104,
     1263, 3420, 3420, 1265,    0,  110, 3420,  108,    0,   97,
      111, 3420,  114,  115,  116, 3420, 1264,    0,  120, 3420,
      121,  123,  124, 3420, 1263,    0, 1264, 1243, 1242, 1251,
      133, 1251,  111,  115,  128,  127,    0,  133,  132,    0,
     1251, 1242, 1226, 1239, 1242,  163,    0, 3420, 3420,  133,
        0,    0, 1180, 3420, 1160, 1174, 1173,  167, 1173, 1151,
     1153, 1152,  175, 1169,  136, 1154, 1157, 1163, 3420, 1158,
     1147, 1136,    4, 1144, 1131,    6,    8, 1130, 1129,   10,

      178,  141,  182,  184,  186, 1128, 1132, 1129,  190,  192,
     1147, 1131, 1029, 1025, 1035, 1026, 1041, 1025, 1033, 1035,
     1029, 1020, 1034, 1025, 1027, 1029,  194,  196, 1030, 1021,
      198,  202,  206,  208,  166,  185,  212,  217,  197,  224,
      207,  213,  226,  218,  225,  226,  230,  236,  241, 3420,
      243,  229,  247,  231,  235,  252,  246,  247,  258,  270,
      276,  251,  291,  297,  287, 3420,  302,  257,  269,  308,
      317, 1043,  319,  272,  323,  327,  277,  333,  342,  337,
      305,  352,  346,  301,  329,  359,  369,  341,  373,  381,
     1011, 1018,  385,  389,  400,  393,  412, 1009, 1021,  416,

      395,  401,  434,  351,  441,  446,  418, 1015, 1013,  407,
      405,  459,  448, 1015, 1017,  449,  450,  466,  458,  467,
     1004, 1008,  460,  462,  468,  474, 1001,  857,  475,  472,
      478,  492,  377,  489,  490,  499,  506,  505,  514,  519,
      521,  533,  508,  514,  526,  538,  573,  617,  528,  532,
      547,  549,  660,  553,  682,  726,  769,  773,  555,  563,
      862,  861,  813,    0,  856,    0,  896,  940,  777,  557,
      663,  857,  849,  854,  984, 1027,  772,  768, 1067, 1111,
      862,  853,  852,  844,  847,  779,  776, 1154,    0, 1158,
      855, 1026, 1153, 1198,    0, 1241,    0,  787,  756,  860,

      753,  762,  782,  643, 1157, 1240, 1243, 1242, 1245, 1250,
     1249, 1290, 1333, 1246, 1332,  645,  654,  668,  655,  642,
      649, 1335, 1336, 1341, 1342, 1340, 1346, 1345, 1385,    0,
     1352, 1358, 1359, 1360,  646,  529,  419,  767,  539,  527,
      512, 1361, 1354, 1406, 1362, 1363, 1399, 1401, 1390, 1408,
     1410, 1411, 1418, 1419,  568,  263, 1413,  791, 1421,  519,
      410,  412, 1254,  409,  402, 1422, 1428, 1440, 1432, 1444,
     1447, 1431, 1442, 1439, 1473, 1459, 1464, 1486, 1465,  382,
      863, 1493,  340,  339,  336,  336,  801, 1505, 1476, 1515,
     1472, 1510, 1506, 1516, 1525, 1517, 1518, 1527, 1524, 1538,

     1520, 1542, 1543,  326, 1583, 1626,  330,  287,  272, 1490,
      866, 1625, 1630, 1631, 1629, 1632, 1633, 1640, 1634, 1641,
     1652, 1656, 1658, 1643, 1698, 1646, 1741,  274,  260,  245,
     1648, 1740, 1742, 1651, 1749, 1756, 1761, 1748, 1745, 1744,
     1755, 1773, 1769, 1750, 1812,    0, 1782, 1800,  673,  245,
      231, 1787, 1793, 1805, 1789, 1653, 1766, 1788, 1807, 1841,
     1814, 1819, 1818, 1821, 1654, 1826,  784,  153,  140, 1860,
     1816, 1837, 1846, 1850, 1852, 1855, 1871, 1866, 1878, 1859,
     1882, 1862, 1873, 1888, 1877,  138, 1918, 1893, 1902, 1898,
     1904, 1907, 1896, 1920, 1946, 1921, 1925, 1929, 1899, 1930,

     1932, 1961, 1971, 1941, 1977, 1935, 1945, 1949, 1948, 1988,
     1987, 1979, 1989, 1991, 1992, 2019, 2031, 1963,  868, 2003,
     2002, 2004, 2035, 2020, 2025, 2013, 2034, 2046, 2041, 2049,
     2047, 2089, 2132, 2136, 2140, 2131, 2135, 2142, 2143, 2146,
     2148, 2149, 2150, 2190, 2231, 2235,  874, 2234, 2236, 2237,
     2242, 2247, 2243, 2251, 2290,    0, 2239, 2257, 2264, 2261,
     2265, 2330, 2374, 2267, 2260, 2414, 2289, 2415, 2416, 2420,
     2258, 2419, 2460, 2504, 2544, 2545, 2549, 2548, 2551, 2262,
     2555, 2550, 2554,  878,    0, 2594,    0, 2558, 2567, 2563,
     2565, 2570, 2574, 2599, 2606, 2608, 2615, 2601, 2610, 2614,

     2618, 2619, 2620, 2621, 2626, 2623, 2662, 2631, 2632, 2644,
     2671, 2652, 2664, 2651, 2673, 2678, 2677, 2680, 2681, 2683,
     2691, 2692, 2693, 2682, 2695, 2696, 2700, 2703, 2704, 2720,
     2743, 2711, 2729, 2725, 2737, 2732, 2750, 2768, 2773, 2749,
     2745, 2756, 2757, 2813, 2857, 2751, 2900, 2752, 2899, 2940,
     2984, 3024, 3028, 3027, 3029, 1032,    0, 3068,    0, 3034,
     3035, 3044, 3048, 3052, 3056, 3076, 3058, 3047, 3078, 3086,
     3097, 2753, 3089, 3109, 3055, 3099, 3092, 3102, 3119, 3131,
     3420, 3171, 3179, 3187, 3195, 3200, 3208, 3216, 3221,  140,
     3229,  132,  113, 3236, 3241, 3246, 3254,    7, 3261, 3269,

     3277, 3284, 3291, 3298, 3305, 3313, 3321, 3329, 3337, 3345,
     3353, 3360, 3367, 3374, 3381, 3388, 3395, 3403, 3411
    } ;

static yyconst short int yy_def[720] =
    {   0,
      682,  682,  681,    3,  681,    5,  681,  683,  683,  681,
      681,  681,  684,  685,  681,  681,  686,  681,  687,  688,
      681,  681,  681,  689,  683,  683,  681,  681,  690,  691,
      684,  681,  684,  685,  685,  681,  686,  692,  687,  681,
      687,  688,  688,  681,  689,  693,  681,  681,  681,  681,
      694,  691,  691,  691,  684,  685,  695,  687,  688,  696,
      697,  681,  681,  681,  681,  694,  698,  681,  681,  691,
      695,  696,  697,  681,  681,  681,  681,  699,  700,  681,
      681,  681,  699,  700,  700,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  701,  702,  681,  701,  701,  703,

      704,  701,  681,  703,  705,  701,  681,  681,  681,  705,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  706,  707,  681,  681,  706,  681,
      706,  707,  681,  707,  708,  709,  681,  706,  681,  681,
      707,  708,  681,  708,  709,  681,  709,  710,  706,  681,
      707,  707,  681,  708,  681,  681,  709,  710,  710,  710,
      681,  681,  707,  711,  708,  709,  709,  710,  710,  681,
      681,  707,  707,  711,  711,  711,  710,  710,  710,  681,
      681,  681,  707,  707,  711,  711,  710,  681,  681,  707,

      707,  707,  711,  711,  711,  710,  710,  681,  681,  707,
      707,  710,  710,  681,  681,  707,  707,  710,  710,  710,
      681,  681,  707,  707,  710,  710,  681,  681,  707,  707,
      710,  710,  681,  681,  707,  707,  710,  710,  712,  713,
      707,  707,  710,  710,  714,  715,  681,  681,  710,  710,
      716,  714,  681,  715,  681,  681,  710,  710,  717,  681,
      681,  681,  681,  255,  707,  256,  681,  681,  681,  717,
      681,  681,  681,  681,  681,  707,  707,  707,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  707,  275,  707,
      707,  707,  707,  681,  279,  710,  280,  681,  681,  681,

      681,  681,  681,  681,  707,  707,  707,  707,  707,  707,
      707,  681,  710,  710,  710,  681,  681,  681,  681,  681,
      681,  707,  707,  707,  707,  707,  707,  707,  710,  312,
      710,  710,  710,  710,  681,  681,  718,  681,  681,  681,
      681,  707,  707,  707,  707,  707,  707,  710,  710,  710,
      710,  710,  710,  710,  681,  681,  718,  681,  718,  681,
      681,  681,  681,  681,  681,  707,  707,  718,  707,  707,
      707,  707,  710,  710,  710,  710,  710,  710,  710,  681,
      716,  718,  681,  681,  681,  681,  681,  707,  707,  718,
      718,  707,  707,  707,  707,  707,  707,  710,  710,  710,

      710,  710,  710,  681,  681,  718,  681,  681,  681,  681,
      681,  707,  718,  707,  707,  707,  707,  707,  710,  710,
      710,  710,  710,  710,  681,  718,  718,  681,  681,  681,
      707,  707,  707,  707,  707,  707,  710,  710,  710,  710,
      710,  710,  710,  710,  718,  425,  718,  718,  681,  681,
      681,  707,  707,  707,  710,  710,  710,  710,  710,  710,
      718,  718,  718,  718,  718,  718,  681,  681,  681,  707,
      707,  707,  710,  710,  710,  710,  710,  710,  718,  718,
      718,  718,  718,  718,  719,  681,  707,  707,  707,  710,
      710,  710,  718,  718,  718,  718,  718,  718,  718,  719,

      719,  719,  707,  707,  710,  710,  710,  718,  718,  718,
      718,  718,  718,  718,  718,  719,  719,  719,  263,  710,
      710,  710,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  681,  719,  719,  710,  710,  718,  718,  718,  718,
      718,  718,  718,  681,  719,  719,  294,  718,  718,  718,
      718,  718,  718,  718,  719,  544,  719,  719,  718,  718,
      718,  681,  681,  719,  719,  719,  719,  719,  719,  718,
      718,  718,  681,  681,  719,  719,  719,  719,  719,  719,
      718,  718,  718,  405,  573,  718,  574,  719,  719,  719,
      719,  719,  719,  719,  719,  718,  718,  718,  718,  719,

      719,  719,  719,  719,  719,  719,  718,  718,  718,  718,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  718,
      718,  718,  719,  719,  719,  719,  719,  719,  719,  718,
      718,  718,  719,  719,  719,  719,  719,  719,  719,  718,
      719,  719,  719,  681,  681,  718,  719,  719,  719,  681,
      681,  718,  719,  719,  719,  532,  650,  719,  651,  718,
      719,  719,  719,  719,  718,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
        0,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,

      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681
    } ;

static yyconst short int yy_nxt[3465] =
    {   0,
      681,    9,    9,    9,    9,   96,   96,   96,   96,  101,
      101,  103,  103,   10,   78,   10,   11,   12,   12,   11,
       13,   11,   14,   11,   11,   11,   11,   11,   11,   11,
       15,   11,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   11,   11,   11,   17,   17,   17,
       11,   18,   18,   11,   19,   11,   20,   11,   11,   11,
       11,   21,   11,   11,   22,   23,   11,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   11,   11,

       11,   24,   24,   24,   26,   26,   28,   32,   32,   40,
       40,   26,   26,   53,   29,   32,   27,   47,   55,   30,
       60,   32,   56,   27,   40,   58,   69,   53,   48,   40,
       59,   53,   32,   32,   65,   65,   49,   40,   40,   57,
       54,   35,   33,   43,   41,   67,   50,   51,   68,   53,
       33,   89,   85,   33,   35,   35,  106,   70,  358,   41,
       41,  486,   43,   43,   65,   65,   35,   33,   65,   65,
      140,   43,   41,  358,   79,   67,   65,   65,   68,  101,
      101,  102,   68,  103,  103,  103,  103,  109,  109,  143,
       68,  109,  109,  109,  109,  131,  131,  132,  132,  131,

      131,  140,  135,  132,  132,  141,  136,  137,  137,  138,
      138,  148,  107,  137,  137,  108,  145,  143,  138,  138,
      113,  146,  151,  114,  144,  147,  147,  149,  149,  153,
      156,  147,  147,  153,  158,  164,  141,  159,  159,  156,
      140,  150,  149,  149,  161,  161,  141,  143,  163,  163,
      167,  143,  144,  165,  165,  143,  150,  144,  162,  159,
      159,  143,  170,  469,  154,  157,  468,  166,  154,  451,
      154,  171,  171,  178,  157,  141,  156,  161,  161,  160,
      143,  156,  144,  172,  450,  157,  169,  380,  165,  165,
      144,  162,  163,  163,  449,  174,  169,  141,  175,  175,

      355,  153,  166,  176,  176,  156,  156,  430,  169,  179,
      179,  185,  143,  429,  173,  144,  157,  177,  171,  171,
      182,  182,  191,  143,  175,  175,  192,  186,  176,  176,
      172,  156,  183,  195,  187,  187,  154,  143,  190,  190,
      185,  157,  177,  179,  179,  143,  189,  169,  188,  194,
      143,  428,  150,  182,  182,  156,  143,  180,  144,  355,
      196,  196,  154,  156,  410,  183,  157,  409,  185,  408,
      187,  187,  169,  143,  187,  187,  407,  143,  239,  239,
      169,  169,  190,  190,  188,  144,  200,  200,  188,  143,
      185,  144,  193,  143,  196,  196,  150,  205,  185,  143,

      162,  203,  203,  404,  156,  143,  201,  197,  169,  143,
      202,  143,  169,  206,  206,  204,  143,  200,  200,  387,
      143,  213,  143,  358,  144,  207,  217,  211,  144,  210,
      386,  162,  185,  385,  144,  203,  203,  384,  156,  185,
      144,  216,  203,  203,  144,  156,  144,  206,  206,  204,
      143,  169,  143,  143,  143,  144,  204,  169,  359,  207,
      218,  218,  143,  143,  143,  219,  143,  218,  218,  220,
      143,  143,  143,  185,  188,  223,  143,  224,  143,  143,
      185,  188,  143,  230,  229,  169,  212,  169,  144,  144,
      240,  240,  225,  226,  143,  232,  143,  169,  169,  144,

      236,  144,  231,  143,  237,  169,  169,  169,  235,  143,
      143,  144,  143,  169,  144,  239,  239,  169,  143,  238,
      240,  240,  247,  247,  241,  143,  244,  251,  251,  144,
      243,  169,  143,  242,  248,  248,  143,  143,  144,  253,
      253,  249,  250,  383,  169,  169,  365,  169,  251,  251,
      251,  251,  364,  169,  253,  253,  269,  269,  269,  269,
      144,  363,  257,  356,  271,  271,  258,  169,  272,  318,
      318,  169,  144,  142,  247,  247,  142,  143,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,

      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  142,  144,  142,  255,  255,  255,  142,  248,  248,
      142,  143,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  142,  144,  142,  256,  256,
      256,  253,  253,  355,  271,  271,  341,  260,  272,  318,
      318,  340,  337,  338,  467,  467,  339,  261,  336,  335,
      286,  262,  142,  263,  263,  142,  143,  142,  142,  142,
      142,  142,  264,  142,  142,  142,  142,  142,  142,  264,

      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      142,  144,  142,  264,  264,  264,  142,  265,  265,  142,
      143,  142,  142,  142,  142,  142,  266,  142,  142,  142,
      142,  142,  142,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  142,  144,  142,  266,  266,  266,
      267,  267,  143,  143,  268,  268,  143,  143,  269,  269,
      303,  303,  321,  303,  303,  467,  467,  320,  485,  360,
      317,  361,  381,  381,  171,  293,  281,  171,  282,  362,

      292,  283,  411,  411,  316,  284,  171,  144,  169,  286,
      304,  144,  169,  142,  263,  263,  142,  143,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  142,  144,  142,  275,  275,  275,  265,  265,  143,
      143,  318,  318,  276,  381,  381,  302,  411,  411,  519,
      519,  301,  300,  277,  286,  547,  547,  278,  171,  584,
      584,  299,  298,  182,  287,  309,  286,  285,  274,  206,
      273,  234,  319,  357,  144,  144,  168,  267,  267,  168,

      143,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  168,  169,  168,  279,  279,  279,
      168,  268,  268,  168,  143,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  168,  169,
      168,  280,  280,  280,  142,  288,  288,  142,  143,  142,
      142,  142,  142,  142,  289,  142,  142,  142,  142,  142,

      142,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  142,  144,  142,  289,  289,  289,  290,  290,
      143,  143,  291,  656,  656,  233,  228,  227,  222,  221,
      215,  214,  209,  208,  199,  198,  181,  500,  134,  133,
      130,  129,  128,  127,  126,  125,  124,  123,  122,  121,
      120,  119,  118,  310,  117,  144,  144,  168,  294,  294,
      168,  143,  168,  168,  168,  168,  168,  295,  168,  168,
      168,  168,  168,  168,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,

      295,  295,  295,  295,  295,  168,  169,  168,  295,  295,
      295,  168,  296,  296,  168,  143,  168,  168,  168,  168,
      168,  297,  168,  168,  168,  168,  168,  168,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  168,
      169,  168,  297,  297,  297,  288,  288,  143,  143,  290,
      290,  143,  143,  291,  116,  115,  112,  111,   99,  102,
       99,   99,   97,  305,   95,  306,   94,  322,  307,   93,
       92,   91,  308,  311,   90,   85,   88,   87,   86,   85,
       82,   81,  144,  144,   80,   74,  144,  144,  168,  294,

      294,  168,  143,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  168,  169,  168,  312,
      312,  312,  296,  296,  143,  143,  143,  143,  313,  143,
      143,  327,  327,  143,  143,  318,  318,   68,  314,   77,
       76,   75,  315,  324,  326,  182,   74,   53,  323,  325,
       64,   63,   62,   61,  333,   46,   38,   46,   44,  144,
      169,  144,  144,  328,  144,  169,   38,  355,  144,  144,
      168,  329,  329,  168,  143,  168,  168,  168,  168,  168,

      330,  168,  168,  168,  168,  168,  168,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  168,  169,
      168,  330,  330,  330,  331,  331,  143,  143,  332,  143,
      143,   36,  344,  344,  143,  143,  143,  327,  327,  143,
      143,  681,  342,  331,  331,  681,  143,  332,  143,  334,
      347,  182,  143,  143,  143,  143,  143,  143,  681,  681,
      343,  169,  169,  345,  144,  144,  346,  681,  367,  144,
      144,  144,  310,  370,  144,  144,  329,  329,  352,  143,
      354,  169,  371,  144,  143,  366,  353,  169,  169,  169,

      144,  144,  144,  143,  348,  143,  349,  344,  344,  350,
      368,  369,  143,  351,  143,  143,  372,  358,  374,  378,
      378,  373,  143,  143,  169,  382,  143,  681,  375,  169,
      377,  681,  143,  206,  681,  143,  143,  376,  144,  388,
      169,  390,  390,  143,  358,  144,  143,  169,  143,  169,
      169,  143,  359,  379,  392,  391,  393,  169,  169,  398,
      359,  144,  389,  143,  394,  397,  395,  144,  143,  143,
      144,  144,  396,  399,  400,  400,  358,  143,  169,  359,
      143,  169,  681,  144,  403,  681,  144,  378,  378,  681,
      143,  318,  318,  402,  405,  405,  681,  358,  169,  681,

      412,  206,  353,  169,  169,  401,  344,  344,  406,  143,
      143,  359,  169,  388,  143,  144,  390,  390,  681,  358,
      143,  143,  143,  355,  143,  169,  344,  344,  143,  143,
      391,  143,  359,  415,  414,  418,  681,  416,  417,  400,
      400,  422,  368,  421,  144,  144,  143,  143,  420,  144,
      681,  681,  681,  413,  359,  144,  144,  144,  388,  169,
      424,  419,  681,  169,  144,  681,  169,  681,  681,  681,
      681,  423,  681,  681,  681,  681,  681,  169,  681,  681,
      681,  169,  169,  357,  405,  405,  357,  358,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  406,  357,

      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  357,  359,  357,  425,  425,  425,  406,  406,  143,
      358,  406,  406,  143,  358,  143,  143,  143,  143,  426,
      681,  436,  436,  426,  143,  143,  431,  143,  310,  447,
      358,  437,  143,  681,  681,  143,  143,  143,  358,  433,
      143,  435,  143,  434,  144,  359,  427,  432,  144,  359,
      144,  144,  144,  169,  439,  438,  440,  444,  442,  144,
      169,  388,  169,  443,  441,  359,  454,  144,  483,  474,
      144,  169,  169,  359,  681,  169,  681,  169,  357,  445,

      445,  357,  358,  357,  357,  357,  357,  357,  446,  357,
      357,  357,  357,  357,  357,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  357,  359,  357,  446,
      446,  446,  448,  448,  143,  358,  143,  681,  143,  143,
      344,  344,  143,  143,  143,  681,  391,  436,  436,  143,
      143,  452,  400,  400,  310,  143,  681,  460,  453,  456,
      143,  457,  455,  143,  400,  400,  458,  143,  681,  144,
      359,  144,  388,  169,  169,  437,  358,  169,  144,  169,
      459,  143,  143,  143,  169,  144,  475,  143,  681,  465,

      169,  448,  448,  466,  358,  169,  437,  470,  169,  143,
      473,  143,  169,  445,  445,  391,  358,  471,  358,  476,
      143,  359,  358,  358,  681,  358,  144,  169,  169,  472,
      358,  461,  144,  462,  479,  477,  463,  488,  481,  359,
      464,  143,  478,  478,  144,  143,  169,  480,  482,  353,
      143,  359,  484,  359,  143,  144,  143,  359,  359,  143,
      359,  487,  487,  358,  143,  359,  358,  478,  478,  489,
      143,  490,  400,  400,  353,  143,  144,  358,  491,  437,
      169,  358,  358,  495,  495,  169,  358,  681,  681,  169,
      492,  169,  358,  494,  169,  493,  497,  143,  359,  144,

      358,  359,  143,  358,  437,  169,  143,  498,  143,  499,
      169,  143,  359,  503,  496,  681,  501,  359,  505,  487,
      487,  359,  502,  504,  358,  358,  515,  359,  506,  358,
      508,  507,  144,  358,  358,  359,  516,  169,  359,  143,
      681,  144,  512,  169,  509,  143,  169,  495,  495,  143,
      510,  511,  358,  358,  513,  514,  521,  144,  681,  359,
      359,  503,  517,  517,  359,  358,  523,  358,  359,  501,
      681,  501,  519,  519,  169,  143,  518,  522,  520,  520,
      144,  143,  524,  358,  169,  359,  182,  359,  359,  405,
      405,  358,  358,  358,  681,  358,  358,  681,  681,  681,

      501,  528,  501,  406,  520,  520,  143,  502,  143,  525,
      144,  526,  681,  531,  529,  530,  169,  358,  359,  527,
      532,  532,  535,  358,  358,  536,  359,  359,  359,  358,
      359,  359,  517,  517,  533,  358,  495,  495,  358,  358,
      539,  169,  169,  169,  537,  358,  518,  495,  495,  538,
      358,  358,  359,  358,  681,  540,  681,  523,  501,  359,
      681,  681,  541,  681,  359,  681,  681,  681,  681,  534,
      501,  681,  681,  359,  359,  543,  681,  681,  681,  523,
      359,  681,  542,  681,  681,  359,  359,  681,  359,  500,
      532,  532,  500,  358,  500,  500,  500,  500,  500,  500,

      500,  500,  500,  500,  533,  500,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  500,  501,  500,
      544,  544,  544,  533,  533,  143,  358,  533,  533,  358,
      358,  547,  547,  681,  143,  545,  358,  358,  681,  545,
      358,  535,  358,  358,  358,  206,  548,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      169,  501,  546,  550,  359,  501,  552,  551,  549,  169,
      681,  359,  359,  553,  554,  359,  681,  359,  359,  359,
      500,  555,  555,  500,  358,  500,  500,  500,  500,  500,

      556,  500,  500,  500,  500,  500,  500,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  500,  501,
      500,  556,  556,  556,  557,  358,  558,  558,  358,  358,
      358,  358,  681,  358,  562,  562,  358,  358,  495,  495,
      518,  358,  563,  563,  681,  358,  568,  559,  558,  558,
      569,  358,  358,  560,  358,  358,  358,  523,  358,  358,
      501,  358,  518,  359,  501,  359,  359,  561,  501,  582,
      523,  359,  359,  594,  570,  571,  359,  575,  576,  572,
      359,  555,  555,  358,  358,  681,  501,  359,  681,  501,

      359,  501,  681,  359,  359,  681,  501,  681,  681,  564,
      681,  565,  681,  681,  566,  681,  578,  681,  567,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  501,  501,
      357,  562,  562,  357,  358,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  357,  359,
      357,  573,  573,  573,  357,  563,  563,  357,  358,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  574,  574,  574,  574,  574,  574,  574,  574,  574,

      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  357,  359,  357,  574,  574,  574,  358,  358,
      358,  581,  581,  358,  358,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  577,  681,  681,  681,  681,  681,
      681,  681,  580,  681,  681,  681,  681,  681,  681,  579,
      681,  583,  681,  501,  501,  501,  681,  681,  359,  359,
      357,  584,  584,  357,  358,  357,  357,  357,  357,  357,
      585,  357,  357,  357,  357,  357,  357,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  357,  359,

      357,  585,  585,  585,  357,  586,  586,  357,  358,  357,
      357,  357,  357,  357,  587,  357,  357,  357,  357,  357,
      357,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  357,  359,  357,  587,  587,  587,  358,  358,
      590,  590,  358,  358,  358,  358,  581,  581,  358,  595,
      681,  588,  358,  681,  590,  590,  681,  510,  602,  358,
      382,  358,  681,  681,  358,  596,  681,  681,  358,  589,
      681,  591,  592,  501,  501,  593,  603,  501,  501,  359,
      501,  601,  600,  359,  359,  586,  586,  501,  358,  604,

      605,  597,  501,  358,  501,  358,  501,  532,  532,  501,
      358,  598,  358,  501,  358,  599,  607,  607,  358,  358,
      608,  533,  358,  358,  358,  358,  606,  358,  382,  609,
      358,  611,  681,  359,  681,  358,  358,  610,  501,  681,
      359,  613,  616,  614,  619,  501,  617,  359,  358,  359,
      618,  615,  612,  501,  359,  358,  358,  501,  501,  501,
      501,  620,  501,  607,  607,  501,  358,  608,  358,  621,
      359,  359,  590,  590,  622,  358,  623,  358,  625,  590,
      590,  358,  358,  359,  358,  358,  358,  358,  624,  611,
      501,  501,  631,  631,  626,  358,  358,  358,  627,  358,

      358,  359,  630,  501,  358,  681,  406,  358,  358,  629,
      501,  611,  501,  628,  633,  358,  501,  501,  634,  501,
      501,  501,  359,  681,  358,  635,  632,  636,  637,  358,
      359,  359,  501,  358,  501,  501,  358,  638,  639,  501,
      640,  358,  501,  501,  631,  631,  641,  358,  621,  358,
      359,  590,  590,  358,  358,  358,  358,  358,  406,  359,
      358,  358,  611,  642,  501,  647,  646,  643,  501,  644,
      644,  501,  358,  654,  645,  645,  501,  358,  681,  681,
      648,  649,  359,  611,  501,  652,  681,  675,  359,  501,
      359,  501,  501,  681,  681,  501,  501,  681,  681,  681,

      681,  681,  681,  681,  681,  681,  681,  501,  681,  681,
      681,  681,  501,  500,  644,  644,  500,  358,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  500,  501,  500,  650,  650,  650,  500,  645,  645,
      500,  358,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  500,  501,  500,  651,  651,

      651,  653,  653,  358,  358,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  655,  681,  681,  681,  681,  681,  681,  501,  501,
      500,  656,  656,  500,  358,  500,  500,  500,  500,  500,
      657,  500,  500,  500,  500,  500,  500,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  500,  501,
      500,  657,  657,  657,  500,  658,  658,  500,  358,  500,
      500,  500,  500,  500,  659,  500,  500,  500,  500,  500,

      500,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  500,  501,  500,  659,  659,  659,  358,  653,
      653,  358,  595,  358,  681,  665,  665,  681,  358,  358,
      681,  660,  621,  681,  681,  666,  666,  516,  358,  667,
      661,  358,  358,  681,  681,  516,  358,  665,  665,  358,
      358,  681,  358,  359,  621,  681,  501,  501,  501,  658,
      658,  681,  358,  359,  501,  662,  668,  666,  666,  669,
      358,  667,  358,  501,  671,  663,  501,  501,  670,  664,
      358,  501,  671,  358,  501,  359,  358,  501,  674,  674,

      681,  358,  681,  358,  681,  673,  358,  501,  672,  676,
      674,  674,  533,  358,  681,  501,  677,  501,  681,  679,
      680,  680,  681,  358,  533,  501,  678,  671,  501,  681,
      681,  501,  680,  680,  681,  358,  501,  681,  501,  671,
      681,  501,  681,  681,  681,  681,  681,  681,  501,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  501,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      501,    8,    8,    8,    8,    8,    8,    8,    8,   25,
       25,   25,   25,   25,  681,   25,   25,   31,   31,   31,
       31,   31,   31,   31,   31,   34,   34,   34,   34,   34,

       34,   34,   34,   37,   37,  681,  681,   37,   39,   39,
       39,   39,   39,   39,   39,   39,   42,   42,   42,   42,
       42,   42,   42,   42,   45,   45,  681,  681,   45,   52,
       52,   52,   52,   52,   52,  681,   52,   66,   66,   66,
       66,  681,   66,   66,   71,  681,  681,  681,   71,   72,
      681,  681,  681,   72,   73,   73,   73,   73,   73,   73,
       73,   73,   83,   83,   83,  681,  681,   83,   83,   84,
       84,   84,   84,   84,   84,  681,   84,   98,   98,  681,
       98,   98,   98,   98,   98,  100,  100,  681,  681,  681,
      681,  100,  104,  104,  104,  681,  681,  681,  104,  105,

      105,  681,  681,  681,  681,  105,  110,  110,  110,  681,
      681,  681,  110,  139,  139,  139,  139,  139,  139,  139,
      139,  142,  142,  142,  142,  142,  142,  142,  142,  152,
      152,  152,  152,  152,  152,  152,  152,  155,  155,  155,
      155,  155,  155,  155,  155,  168,  168,  168,  168,  168,
      168,  168,  168,  184,  184,  184,  184,  184,  184,  184,
      184,  245,  245,  681,  681,  681,  681,  245,  246,  246,
      681,  681,  681,  681,  246,  252,  252,  252,  681,  681,
      681,  252,  254,  254,  254,  681,  681,  681,  254,  259,
      259,  681,  681,  681,  681,  259,  270,  270,  270,  681,

      681,  681,  270,  357,  357,  357,  357,  357,  357,  357,
      357,  500,  500,  500,  500,  500,  500,  500,  500,    7,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681
    } ;

static yyconst short int yy_chk[3465] =
    {   0,
        0,    1,    1,    2,    2,   93,   93,   96,   96,   97,
       97,  100,  100,    1,  698,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    9,    9,   10,   13,   14,   19,
       20,   26,   26,   30,   10,   31,    9,   28,   33,   10,
      693,   34,   35,   26,   39,   41,   53,   53,   28,   42,
       43,   54,   55,   56,   51,   51,   28,   58,   59,  692,
       30,   14,   13,   20,   19,   51,   28,  690,   51,   70,
       31,   85,   85,   33,   34,   35,  102,   54,  486,   39,
       41,  469,   42,   43,   66,   66,   56,   55,   78,   78,
      135,   59,   58,  468,   70,   66,   83,   83,   66,  101,
      101,  102,   78,  103,  103,  104,  104,  105,  105,  136,
       83,  109,  109,  110,  110,  127,  127,  128,  128,  131,

      131,  139,  131,  132,  132,  135,  132,  133,  133,  134,
      134,  141,  103,  137,  137,  103,  137,  142,  138,  138,
      109,  138,  144,  109,  136,  140,  140,  143,  143,  145,
      146,  147,  147,  152,  147,  154,  139,  148,  148,  155,
      148,  143,  149,  149,  151,  151,  141,  151,  153,  153,
      157,  158,  142,  156,  156,  162,  149,  144,  151,  159,
      159,  168,  159,  451,  145,  146,  450,  156,  152,  430,
      154,  160,  160,  169,  155,  148,  174,  161,  161,  149,
      161,  177,  151,  160,  429,  157,  158,  356,  165,  165,
      162,  161,  163,  163,  428,  163,  168,  159,  164,  164,

      356,  164,  165,  167,  167,  184,  167,  409,  169,  170,
      170,  174,  170,  408,  161,  161,  177,  167,  171,  171,
      173,  173,  181,  173,  175,  175,  181,  175,  176,  176,
      171,  176,  173,  185,  178,  178,  164,  178,  180,  180,
      184,  167,  176,  179,  179,  188,  179,  170,  178,  183,
      183,  407,  180,  182,  182,  204,  182,  171,  173,  404,
      186,  186,  175,  186,  386,  182,  176,  385,  185,  384,
      187,  187,  178,  187,  189,  189,  383,  189,  233,  233,
      188,  179,  190,  190,  187,  183,  193,  193,  189,  193,
      204,  182,  182,  194,  196,  196,  190,  196,  186,  201,

      193,  195,  195,  380,  195,  202,  194,  187,  187,  211,
      194,  210,  189,  197,  197,  195,  197,  200,  200,  365,
      200,  207,  207,  337,  193,  197,  211,  202,  194,  201,
      364,  200,  196,  362,  201,  203,  203,  361,  203,  195,
      202,  210,  205,  205,  211,  205,  210,  206,  206,  203,
      206,  197,  213,  216,  217,  200,  205,  207,  337,  206,
      212,  212,  219,  212,  223,  213,  224,  218,  218,  213,
      218,  220,  225,  203,  212,  216,  230,  217,  226,  229,
      205,  218,  231,  224,  223,  206,  206,  213,  216,  217,
      234,  234,  219,  220,  235,  226,  232,  219,  212,  223,

      230,  224,  225,  236,  231,  218,  220,  225,  229,  238,
      237,  230,  243,  226,  229,  239,  239,  231,  244,  232,
      240,  240,  241,  241,  235,  241,  238,  245,  245,  235,
      237,  232,  249,  236,  242,  242,  250,  242,  236,  246,
      246,  243,  244,  360,  238,  237,  341,  243,  251,  251,
      252,  252,  340,  244,  254,  254,  259,  259,  270,  270,
      241,  339,  249,  336,  260,  260,  250,  249,  260,  355,
      355,  250,  242,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,

      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  253,  253,  335,  271,  271,  321,  253,  271,  318,
      318,  320,  318,  318,  449,  449,  319,  253,  317,  316,
      304,  253,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,

      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      257,  257,  278,  257,  258,  258,  277,  258,  269,  269,
      286,  286,  302,  303,  303,  467,  467,  301,  467,  338,
      299,  338,  358,  358,  286,  278,  269,  303,  269,  338,

      277,  269,  387,  387,  298,  269,  358,  278,  257,  387,
      287,  277,  258,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  265,  265,  291,
      265,  300,  300,  265,  381,  381,  285,  411,  411,  519,
      519,  284,  283,  265,  411,  547,  547,  265,  381,  584,
      584,  282,  281,  519,  274,  291,  273,  272,  262,  547,
      261,  228,  300,  584,  291,  265,  267,  267,  267,  267,

      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,

      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  276,  276,
      292,  276,  276,  656,  656,  227,  222,  221,  215,  214,
      209,  208,  199,  198,  192,  191,  172,  656,  130,  129,
      126,  125,  124,  123,  122,  121,  120,  119,  118,  117,
      116,  115,  114,  292,  113,  292,  276,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,

      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  288,  288,  293,  288,  290,
      290,  305,  290,  290,  112,  111,  108,  107,  106,   99,
       98,   95,   94,  288,   92,  288,   91,  305,  288,   90,
       88,   87,  288,  293,   86,   84,   82,   81,   80,   79,
       77,   76,  293,  288,   75,   73,  305,  290,  294,  294,

      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  296,  296,  306,  296,  308,  307,  296,  309,
      314,  310,  310,  311,  310,  363,  363,   65,  296,   64,
       63,   62,  296,  307,  309,  310,   61,   52,  306,  308,
       50,   49,   48,   47,  314,   45,   37,   24,   21,  306,
      296,  308,  307,  311,  309,  314,   17,  363,  311,  310,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,

      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  313,  313,  315,  313,  313,  322,
      323,   16,  324,  324,  326,  324,  325,  327,  327,  328,
      327,    7,  322,  331,  331,    0,  331,  331,  343,  315,
      326,  327,  332,  333,  334,  342,  345,  346,    0,    0,
      323,  315,  313,  324,  322,  323,  325,    0,  343,  326,
      324,  325,  328,  345,  328,  327,  329,  329,  332,  329,
      334,  331,  346,  343,  349,  342,  333,  332,  333,  334,

      342,  345,  346,  347,  329,  348,  329,  344,  344,  329,
      344,  344,  350,  329,  351,  352,  347,  357,  349,  353,
      353,  348,  353,  354,  329,  359,  366,    0,  350,  349,
      352,    0,  367,  353,    0,  372,  369,  351,  347,  366,
      348,  368,  368,  374,  368,  344,  373,  350,  370,  351,
      352,  371,  357,  354,  369,  368,  369,  353,  354,  373,
      359,  366,  367,  376,  369,  372,  370,  367,  377,  379,
      372,  369,  371,  374,  375,  375,  391,  375,  374,  368,
      389,  373,    0,  370,  377,    0,  371,  378,  378,    0,
      378,  410,  410,  376,  382,  382,    0,  382,  376,    0,

      389,  378,  379,  377,  379,  375,  388,  388,  382,  388,
      393,  391,  375,  389,  392,  389,  390,  390,    0,  390,
      394,  396,  397,  410,  401,  378,  395,  395,  399,  395,
      390,  398,  382,  393,  392,  397,    0,  394,  396,  400,
      400,  401,  400,  400,  388,  393,  402,  403,  399,  392,
        0,    0,    0,  390,  390,  394,  396,  397,  395,  401,
      403,  398,    0,  399,  395,    0,  398,    0,    0,    0,
        0,  402,    0,    0,    0,    0,    0,  400,    0,    0,
        0,  402,  403,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,

      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  406,  406,  412,
      406,  413,  413,  415,  413,  414,  416,  417,  419,  406,
        0,  418,  418,  413,  418,  420,  412,  424,  418,  426,
      426,  419,  431,    0,    0,  434,  421,  456,  465,  415,
      422,  417,  423,  416,  412,  406,  406,  414,  415,  413,
      414,  416,  417,  419,  421,  420,  421,  424,  422,  418,
      420,  431,  424,  423,  421,  426,  434,  431,  465,  456,
      434,  421,  456,  465,    0,  422,    0,  423,  425,  425,

      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  427,  427,  432,  427,  433,    0,  440,  439,
      435,  435,  438,  435,  444,    0,  427,  436,  436,  441,
      436,  432,  437,  437,  436,  437,    0,  444,  433,  439,
      457,  440,  438,  443,  442,  442,  441,  442,    0,  432,
      427,  433,  435,  440,  439,  438,  447,  438,  435,  444,
      443,  452,  458,  455,  441,  436,  457,  453,    0,  447,

      437,  448,  448,  447,  448,  457,  442,  452,  443,  454,
      455,  459,  442,  445,  445,  448,  445,  453,  461,  458,
      471,  447,  463,  462,    0,  464,  452,  458,  455,  454,
      466,  445,  453,  445,  461,  459,  445,  471,  463,  448,
      445,  472,  460,  460,  454,  460,  459,  462,  464,  460,
      473,  445,  466,  461,  474,  471,  475,  463,  462,  476,
      464,  470,  470,  480,  470,  466,  482,  478,  478,  472,
      478,  474,  477,  477,  478,  477,  472,  483,  475,  473,
      460,  485,  479,  481,  481,  473,  481,    0,    0,  474,
      476,  475,  484,  480,  476,  479,  482,  488,  480,  470,

      493,  482,  490,  499,  477,  478,  489,  483,  491,  484,
      477,  492,  483,  488,  481,    0,  485,  479,  490,  487,
      487,  481,  487,  489,  494,  496,  499,  484,  491,  497,
      493,  492,  488,  498,  500,  493,  501,  490,  499,  506,
        0,  489,  496,  491,  494,  504,  492,  495,  495,  507,
      495,  495,  509,  508,  497,  498,  506,  487,    0,  494,
      496,  504,  502,  502,  497,  502,  508,  518,  498,  500,
        0,  501,  503,  503,  506,  503,  502,  507,  505,  505,
      504,  505,  509,  512,  507,  495,  503,  509,  508,  510,
      510,  511,  510,  513,    0,  514,  515,    0,    0,    0,

      502,  512,  518,  510,  520,  520,  521,  520,  522,  511,
      503,  511,    0,  515,  513,  514,  505,  526,  512,  511,
      516,  516,  521,  516,  524,  522,  511,  510,  513,  525,
      514,  515,  517,  517,  516,  517,  523,  523,  527,  523,
      526,  521,  520,  522,  524,  529,  517,  528,  528,  525,
      528,  531,  526,  530,    0,  527,    0,  524,  516,  524,
        0,    0,  529,    0,  525,    0,    0,    0,    0,  517,
      517,    0,    0,  527,  523,  531,    0,    0,    0,  528,
      529,    0,  530,    0,    0,  528,  531,    0,  530,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,

      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  533,  533,  536,  533,  534,  534,  537,
      534,  535,  535,    0,  535,  533,  538,  539,    0,  534,
      540,  536,  541,  542,  543,  535,  537,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      536,  533,  533,  539,  537,  534,  541,  540,  538,  535,
        0,  538,  539,  542,  543,  540,    0,  541,  542,  543,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,

      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  545,  545,  546,  546,  548,  546,
      549,  550,    0,  557,  553,  553,  551,  553,  552,  552,
      546,  552,  554,  554,    0,  554,  557,  549,  558,  558,
      557,  558,  571,  550,  565,  560,  580,  548,  559,  561,
      545,  564,  558,  548,  546,  549,  550,  551,  557,  571,
      552,  551,  553,  580,  559,  560,  552,  564,  565,  561,
      554,  555,  555,  567,  555,    0,  558,  571,    0,  565,

      560,  580,    0,  559,  561,    0,  564,    0,    0,  555,
        0,  555,    0,    0,  555,    0,  567,    0,  555,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  567,  555,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,

      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  566,  568,
      569,  570,  570,  572,  570,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  566,    0,    0,    0,    0,    0,
        0,    0,  569,    0,    0,    0,    0,    0,    0,  568,
        0,  572,    0,  566,  568,  569,    0,    0,  572,  570,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,

      573,  573,  573,  573,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  575,  576,
      577,  577,  578,  577,  582,  579,  581,  581,  583,  581,
        0,  575,  588,    0,  590,  590,    0,  590,  590,  591,
      582,  589,    0,    0,  592,  583,    0,    0,  593,  576,
        0,  577,  578,  575,  576,  579,  591,  578,  577,  582,
      579,  589,  588,  583,  581,  586,  586,  588,  586,  592,

      593,  586,  590,  594,  591,  598,  589,  595,  595,  592,
      595,  586,  596,  593,  599,  586,  597,  597,  600,  597,
      597,  595,  601,  602,  603,  604,  594,  606,  596,  598,
      605,  600,    0,  586,    0,  608,  609,  599,  594,    0,
      598,  602,  603,  602,  606,  595,  604,  596,  610,  599,
      605,  602,  601,  600,  597,  614,  612,  601,  602,  603,
      604,  608,  606,  607,  607,  605,  607,  607,  613,  609,
      608,  609,  611,  611,  610,  611,  612,  615,  614,  616,
      616,  617,  616,  610,  618,  619,  624,  620,  613,  612,
      614,  612,  621,  621,  615,  621,  622,  623,  617,  625,

      626,  607,  620,  613,  627,    0,  621,  628,  629,  619,
      611,  616,  615,  618,  623,  632,  617,  616,  624,  618,
      619,  624,  620,    0,  630,  625,  622,  626,  627,  634,
      621,  622,  623,  633,  625,  626,  636,  628,  629,  627,
      630,  635,  628,  629,  631,  631,  634,  631,  632,  641,
      632,  637,  637,  640,  637,  646,  648,  672,  631,  630,
      642,  643,  633,  635,  634,  641,  640,  636,  633,  638,
      638,  636,  638,  648,  639,  639,  635,  639,    0,    0,
      642,  643,  631,  637,  641,  646,    0,  672,  640,  637,
      646,  648,  672,    0,    0,  642,  643,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  638,    0,    0,
        0,    0,  639,  644,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,

      645,  647,  647,  649,  647,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  649,    0,    0,    0,    0,    0,    0,  649,  647,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,

      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  652,  653,
      653,  654,  653,  655,    0,  660,  660,    0,  660,  661,
        0,  652,  660,    0,    0,  662,  662,  654,  662,  662,
      655,  668,  663,    0,    0,  661,  664,  665,  665,  675,
      665,    0,  667,  652,  665,    0,  654,  653,  655,  658,
      658,    0,  658,  660,  661,  658,  663,  666,  666,  664,
      666,  666,  669,  662,  668,  658,  668,  663,  667,  658,
      670,  664,  675,  673,  675,  665,  677,  667,  671,  671,

        0,  671,    0,  676,    0,  670,  678,  658,  669,  673,
      674,  674,  671,  674,    0,  666,  676,  669,    0,  678,
      679,  679,    0,  679,  674,  670,  677,  679,  673,    0,
        0,  677,  680,  680,    0,  680,  671,    0,  676,  680,
        0,  678,    0,    0,    0,    0,    0,    0,  674,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  679,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      680,  682,  682,  682,  682,  682,  682,  682,  682,  683,
      683,  683,  683,  683,    0,  683,  683,  684,  684,  684,
      684,  684,  684,  684,  684,  685,  685,  685,  685,  685,

      685,  685,  685,  686,  686,    0,    0,  686,  687,  687,
      687,  687,  687,  687,  687,  687,  688,  688,  688,  688,
      688,  688,  688,  688,  689,  689,    0,    0,  689,  691,
      691,  691,  691,  691,  691,    0,  691,  694,  694,  694,
      694,    0,  694,  694,  695,    0,    0,    0,  695,  696,
        0,    0,    0,  696,  697,  697,  697,  697,  697,  697,
      697,  697,  699,  699,  699,    0,    0,  699,  699,  700,
      700,  700,  700,  700,  700,    0,  700,  701,  701,    0,
      701,  701,  701,  701,  701,  702,  702,    0,    0,    0,
        0,  702,  703,  703,  703,    0,    0,    0,  703,  704,

      704,    0,    0,    0,    0,  704,  705,  705,  705,    0,
        0,    0,  705,  706,  706,  706,  706,  706,  706,  706,
      706,  707,  707,  707,  707,  707,  707,  707,  707,  708,
      708,  708,  708,  708,  708,  708,  708,  709,  709,  709,
      709,  709,  709,  709,  709,  710,  710,  710,  710,  710,
      710,  710,  710,  711,  711,  711,  711,  711,  711,  711,
      711,  712,  712,    0,    0,    0,    0,  712,  713,  713,
        0,    0,    0,    0,  713,  714,  714,  714,    0,    0,
        0,  714,  715,  715,  715,    0,    0,    0,  715,  716,
      716,    0,    0,    0,    0,  716,  717,  717,  717,    0,

        0,    0,  717,  718,  718,  718,  718,  718,  718,  718,
      718,  719,  719,  719,  719,  719,  719,  719,  719,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "xml.lex"
#define INITIAL 0
#line 2 "xml.lex"

#include "xml.h"

using namespace std;

#define IN_XML 1

#define IN_TAG 2

#line 1336 "xml.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 30 "xml.lex"


#line 1466 "xml.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 682 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3420 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 32 "xml.lex"
{ BEGIN(IN_XML); return XML_DECL; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 33 "xml.lex"
return ID;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 34 "xml.lex"
return EQ;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 35 "xml.lex"
{ yytext[yyleng-1] = '\0'; yytext++; return VAL; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 36 "xml.lex"
{ BEGIN(INITIAL); return TAG_EMPTY; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 37 "xml.lex"

	YY_BREAK
case 7:
YY_RULE_SETUP
#line 38 "xml.lex"
return PROC_INST;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 39 "xml.lex"
return COMMENT;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 40 "xml.lex"
return NOTATION;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 41 "xml.lex"
return DOCTYPE;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 42 "xml.lex"
{ yytext[yyleng-3] = '\0'; yytext += 9; return RAW_CHARS; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 43 "xml.lex"
return TAG_CLOSE;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 44 "xml.lex"
{ BEGIN(IN_TAG); return TAG_OPEN; }
	YY_BREAK
case 14:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 45 "xml.lex"
return WHITESPACE;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 46 "xml.lex"
return CHARACTERS;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 47 "xml.lex"
return ID;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 48 "xml.lex"
return EQ;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 49 "xml.lex"
{ yytext[yyleng-1] = '\0'; yytext++; return VAL; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 50 "xml.lex"
{ BEGIN(INITIAL); return TAG_EMPTY; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 51 "xml.lex"
{ BEGIN(INITIAL); return TAG_END; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 52 "xml.lex"

	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(IN_XML):
case YY_STATE_EOF(IN_TAG):
#line 53 "xml.lex"
return EoF;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 55 "xml.lex"
ECHO;
	YY_BREAK
#line 1671 "xml.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 682 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 682 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 681);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 55 "xml.lex"

